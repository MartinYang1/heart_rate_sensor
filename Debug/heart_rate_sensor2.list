
heart_rate_sensor2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005c78  08005c78  00006c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d08  08005d08  00007078  2**0
                  CONTENTS
  4 .ARM          00000008  08005d08  08005d08  00006d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d10  08005d10  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d10  08005d10  00006d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d14  08005d14  00006d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08005d18  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000078  08005d90  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08005d90  00007598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b553  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b68  00000000  00000000  000125fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  00014168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fd  00000000  00000000  00014ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001601a  00000000  00000000  0001539d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d80d  00000000  00000000  0002b3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000884f0  00000000  00000000  00038bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c10b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ea4  00000000  00000000  000c10f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000c3f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005c60 	.word	0x08005c60

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08005c60 	.word	0x08005c60

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	@ 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2uiz>:
 8000b10:	004a      	lsls	r2, r1, #1
 8000b12:	d211      	bcs.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d211      	bcs.n	8000b3e <__aeabi_d2uiz+0x2e>
 8000b1a:	d50d      	bpl.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d40e      	bmi.n	8000b44 <__aeabi_d2uiz+0x34>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	fa23 f002 	lsr.w	r0, r3, r2
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_d2uiz+0x3a>
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0000 	mov.w	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2f>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b58:	bf24      	itt	cs
 8000b5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b62:	d90d      	bls.n	8000b80 <__aeabi_d2f+0x30>
 8000b64:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b70:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b84:	d121      	bne.n	8000bca <__aeabi_d2f+0x7a>
 8000b86:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8a:	bfbc      	itt	lt
 8000b8c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b90:	4770      	bxlt	lr
 8000b92:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9a:	f1c2 0218 	rsb	r2, r2, #24
 8000b9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ba6:	fa20 f002 	lsr.w	r0, r0, r2
 8000baa:	bf18      	it	ne
 8000bac:	f040 0001 	orrne.w	r0, r0, #1
 8000bb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bbc:	ea40 000c 	orr.w	r0, r0, ip
 8000bc0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc8:	e7cc      	b.n	8000b64 <__aeabi_d2f+0x14>
 8000bca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bce:	d107      	bne.n	8000be0 <__aeabi_d2f+0x90>
 8000bd0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd4:	bf1e      	ittt	ne
 8000bd6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bda:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bde:	4770      	bxne	lr
 8000be0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_uldivmod>:
 8000bf0:	b953      	cbnz	r3, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf2:	b94a      	cbnz	r2, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	bf08      	it	eq
 8000bf8:	2800      	cmpeq	r0, #0
 8000bfa:	bf1c      	itt	ne
 8000bfc:	f04f 31ff 	movne.w	r1, #4294967295
 8000c00:	f04f 30ff 	movne.w	r0, #4294967295
 8000c04:	f000 b96a 	b.w	8000edc <__aeabi_idiv0>
 8000c08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c10:	f000 f806 	bl	8000c20 <__udivmoddi4>
 8000c14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c1c:	b004      	add	sp, #16
 8000c1e:	4770      	bx	lr

08000c20 <__udivmoddi4>:
 8000c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c24:	9d08      	ldr	r5, [sp, #32]
 8000c26:	460c      	mov	r4, r1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d14e      	bne.n	8000cca <__udivmoddi4+0xaa>
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	458c      	cmp	ip, r1
 8000c30:	4686      	mov	lr, r0
 8000c32:	fab2 f282 	clz	r2, r2
 8000c36:	d962      	bls.n	8000cfe <__udivmoddi4+0xde>
 8000c38:	b14a      	cbz	r2, 8000c4e <__udivmoddi4+0x2e>
 8000c3a:	f1c2 0320 	rsb	r3, r2, #32
 8000c3e:	4091      	lsls	r1, r2
 8000c40:	fa20 f303 	lsr.w	r3, r0, r3
 8000c44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c48:	4319      	orrs	r1, r3
 8000c4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f f68c 	uxth.w	r6, ip
 8000c56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c5e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb04 f106 	mul.w	r1, r4, r6
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d90a      	bls.n	8000c84 <__udivmoddi4+0x64>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c76:	f080 8112 	bcs.w	8000e9e <__udivmoddi4+0x27e>
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	f240 810f 	bls.w	8000e9e <__udivmoddi4+0x27e>
 8000c80:	3c02      	subs	r4, #2
 8000c82:	4463      	add	r3, ip
 8000c84:	1a59      	subs	r1, r3, r1
 8000c86:	fa1f f38e 	uxth.w	r3, lr
 8000c8a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c96:	fb00 f606 	mul.w	r6, r0, r6
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x94>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca6:	f080 80fc 	bcs.w	8000ea2 <__udivmoddi4+0x282>
 8000caa:	429e      	cmp	r6, r3
 8000cac:	f240 80f9 	bls.w	8000ea2 <__udivmoddi4+0x282>
 8000cb0:	4463      	add	r3, ip
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	1b9b      	subs	r3, r3, r6
 8000cb6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa6>
 8000cbe:	40d3      	lsrs	r3, r2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xba>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb4>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa6>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x150>
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xcc>
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	f0c0 80f0 	bcc.w	8000ecc <__udivmoddi4+0x2ac>
 8000cec:	1a86      	subs	r6, r0, r2
 8000cee:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d0e6      	beq.n	8000cc6 <__udivmoddi4+0xa6>
 8000cf8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cfc:	e7e3      	b.n	8000cc6 <__udivmoddi4+0xa6>
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	f040 8090 	bne.w	8000e24 <__udivmoddi4+0x204>
 8000d04:	eba1 040c 	sub.w	r4, r1, ip
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d22:	fb07 f006 	mul.w	r0, r7, r6
 8000d26:	4298      	cmp	r0, r3
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x11c>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x11a>
 8000d34:	4298      	cmp	r0, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2b4>
 8000d3a:	4626      	mov	r6, r4
 8000d3c:	1a1c      	subs	r4, r3, r0
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d46:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4e:	fb00 f707 	mul.w	r7, r0, r7
 8000d52:	429f      	cmp	r7, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x148>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x146>
 8000d60:	429f      	cmp	r7, r3
 8000d62:	f200 80b0 	bhi.w	8000ec6 <__udivmoddi4+0x2a6>
 8000d66:	4620      	mov	r0, r4
 8000d68:	1bdb      	subs	r3, r3, r7
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x9c>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d80:	fa04 f301 	lsl.w	r3, r4, r1
 8000d84:	ea43 030c 	orr.w	r3, r3, ip
 8000d88:	40f4      	lsrs	r4, r6
 8000d8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d8e:	0c38      	lsrs	r0, r7, #16
 8000d90:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d94:	fbb4 fef0 	udiv	lr, r4, r0
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fb00 441e 	mls	r4, r0, lr, r4
 8000da0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da4:	fb0e f90c 	mul.w	r9, lr, ip
 8000da8:	45a1      	cmp	r9, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x1a6>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000db6:	f080 8084 	bcs.w	8000ec2 <__udivmoddi4+0x2a2>
 8000dba:	45a1      	cmp	r9, r4
 8000dbc:	f240 8081 	bls.w	8000ec2 <__udivmoddi4+0x2a2>
 8000dc0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	eba4 0409 	sub.w	r4, r4, r9
 8000dca:	fa1f f983 	uxth.w	r9, r3
 8000dce:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd2:	fb00 4413 	mls	r4, r0, r3, r4
 8000dd6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dda:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x1d2>
 8000de2:	193c      	adds	r4, r7, r4
 8000de4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de8:	d267      	bcs.n	8000eba <__udivmoddi4+0x29a>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d965      	bls.n	8000eba <__udivmoddi4+0x29a>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000df6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	429c      	cmp	r4, r3
 8000e00:	46ce      	mov	lr, r9
 8000e02:	469c      	mov	ip, r3
 8000e04:	d351      	bcc.n	8000eaa <__udivmoddi4+0x28a>
 8000e06:	d04e      	beq.n	8000ea6 <__udivmoddi4+0x286>
 8000e08:	b155      	cbz	r5, 8000e20 <__udivmoddi4+0x200>
 8000e0a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e0e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	40cb      	lsrs	r3, r1
 8000e18:	431e      	orrs	r6, r3
 8000e1a:	40cc      	lsrs	r4, r1
 8000e1c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e20:	2100      	movs	r1, #0
 8000e22:	e750      	b.n	8000cc6 <__udivmoddi4+0xa6>
 8000e24:	f1c2 0320 	rsb	r3, r2, #32
 8000e28:	fa20 f103 	lsr.w	r1, r0, r3
 8000e2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e30:	fa24 f303 	lsr.w	r3, r4, r3
 8000e34:	4094      	lsls	r4, r2
 8000e36:	430c      	orrs	r4, r1
 8000e38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e3c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e48:	fb08 3110 	mls	r1, r8, r0, r3
 8000e4c:	0c23      	lsrs	r3, r4, #16
 8000e4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e52:	fb00 f107 	mul.w	r1, r0, r7
 8000e56:	4299      	cmp	r1, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x24c>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e62:	d22c      	bcs.n	8000ebe <__udivmoddi4+0x29e>
 8000e64:	4299      	cmp	r1, r3
 8000e66:	d92a      	bls.n	8000ebe <__udivmoddi4+0x29e>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	1a5b      	subs	r3, r3, r1
 8000e6e:	b2a4      	uxth	r4, r4
 8000e70:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e74:	fb08 3311 	mls	r3, r8, r1, r3
 8000e78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e7c:	fb01 f307 	mul.w	r3, r1, r7
 8000e80:	42a3      	cmp	r3, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x276>
 8000e84:	eb1c 0404 	adds.w	r4, ip, r4
 8000e88:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e8c:	d213      	bcs.n	8000eb6 <__udivmoddi4+0x296>
 8000e8e:	42a3      	cmp	r3, r4
 8000e90:	d911      	bls.n	8000eb6 <__udivmoddi4+0x296>
 8000e92:	3902      	subs	r1, #2
 8000e94:	4464      	add	r4, ip
 8000e96:	1ae4      	subs	r4, r4, r3
 8000e98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e9c:	e739      	b.n	8000d12 <__udivmoddi4+0xf2>
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	e6f0      	b.n	8000c84 <__udivmoddi4+0x64>
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e706      	b.n	8000cb4 <__udivmoddi4+0x94>
 8000ea6:	45c8      	cmp	r8, r9
 8000ea8:	d2ae      	bcs.n	8000e08 <__udivmoddi4+0x1e8>
 8000eaa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eae:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb2:	3801      	subs	r0, #1
 8000eb4:	e7a8      	b.n	8000e08 <__udivmoddi4+0x1e8>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	e7ed      	b.n	8000e96 <__udivmoddi4+0x276>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	e799      	b.n	8000df2 <__udivmoddi4+0x1d2>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e7d4      	b.n	8000e6c <__udivmoddi4+0x24c>
 8000ec2:	46d6      	mov	lr, sl
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1a6>
 8000ec6:	4463      	add	r3, ip
 8000ec8:	3802      	subs	r0, #2
 8000eca:	e74d      	b.n	8000d68 <__udivmoddi4+0x148>
 8000ecc:	4606      	mov	r6, r0
 8000ece:	4623      	mov	r3, r4
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	e70f      	b.n	8000cf4 <__udivmoddi4+0xd4>
 8000ed4:	3e02      	subs	r6, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	e730      	b.n	8000d3c <__udivmoddi4+0x11c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <rf_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	f5ad 7d5c 	sub.w	sp, sp, #880	@ 0x370
 8000ee6:	af02      	add	r7, sp, #8
 8000ee8:	f507 745a 	add.w	r4, r7, #872	@ 0x368
 8000eec:	f5a4 7457 	sub.w	r4, r4, #860	@ 0x35c
 8000ef0:	6020      	str	r0, [r4, #0]
 8000ef2:	f507 705a 	add.w	r0, r7, #872	@ 0x368
 8000ef6:	f5a0 7058 	sub.w	r0, r0, #864	@ 0x360
 8000efa:	6001      	str	r1, [r0, #0]
 8000efc:	f507 715a 	add.w	r1, r7, #872	@ 0x368
 8000f00:	f5a1 7159 	sub.w	r1, r1, #868	@ 0x364
 8000f04:	600a      	str	r2, [r1, #0]
 8000f06:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8000f0a:	f5a2 725a 	sub.w	r2, r2, #872	@ 0x368
 8000f0e:	6013      	str	r3, [r2, #0]
  float beta_ir, beta_red, x;
  float an_x[BUFFER_SIZE], *ptr_x; //ir
  float an_y[BUFFER_SIZE], *ptr_y; //red

  // calculates DC mean and subtracts DC from ir and red
  f_ir_mean=0.0;
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
  f_red_mean=0.0;
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
  for (k=0; k<n_ir_buffer_length; ++k) {
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8000f26:	e02c      	b.n	8000f82 <rf_heart_rate_and_oxygen_saturation+0xa2>
    f_ir_mean += pun_ir_buffer[k];
 8000f28:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8000f32:	f5a2 7257 	sub.w	r2, r2, #860	@ 0x35c
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f44:	ed97 7ad8 	vldr	s14, [r7, #864]	@ 0x360
 8000f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f4c:	edc7 7ad8 	vstr	s15, [r7, #864]	@ 0x360
    f_red_mean += pun_red_buffer[k];
 8000f50:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8000f5a:	f5a2 7259 	sub.w	r2, r2, #868	@ 0x364
 8000f5e:	6812      	ldr	r2, [r2, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f6c:	ed97 7ad7 	vldr	s14, [r7, #860]	@ 0x35c
 8000f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f74:	edc7 7ad7 	vstr	s15, [r7, #860]	@ 0x35c
  for (k=0; k<n_ir_buffer_length; ++k) {
 8000f78:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8000f82:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000f86:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000f8a:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbc9      	blt.n	8000f28 <rf_heart_rate_and_oxygen_saturation+0x48>
  }
  f_ir_mean=f_ir_mean/n_ir_buffer_length ;
 8000f94:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000f98:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	ee07 3a90 	vmov	s15, r3
 8000fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa6:	edd7 6ad8 	vldr	s13, [r7, #864]	@ 0x360
 8000faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fae:	edc7 7ad8 	vstr	s15, [r7, #864]	@ 0x360
  f_red_mean=f_red_mean/n_ir_buffer_length ;
 8000fb2:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000fb6:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc4:	edd7 6ad7 	vldr	s13, [r7, #860]	@ 0x35c
 8000fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fcc:	edc7 7ad7 	vstr	s15, [r7, #860]	@ 0x35c

  // remove DC
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8000fd6:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8000fda:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8000fe6:	e03a      	b.n	800105e <rf_heart_rate_and_oxygen_saturation+0x17e>
    *ptr_x = pun_ir_buffer[k] - f_ir_mean;
 8000fe8:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8000ff2:	f5a2 7257 	sub.w	r2, r2, #860	@ 0x35c
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001004:	edd7 7ad8 	vldr	s15, [r7, #864]	@ 0x360
 8001008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001010:	edc3 7a00 	vstr	s15, [r3]
    *ptr_y = pun_red_buffer[k] - f_red_mean;
 8001014:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 800101e:	f5a2 7259 	sub.w	r2, r2, #868	@ 0x364
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	4413      	add	r3, r2
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001030:	edd7 7ad7 	vldr	s15, [r7, #860]	@ 0x35c
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800103c:	edc3 7a00 	vstr	s15, [r3]
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 8001040:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001044:	3301      	adds	r3, #1
 8001046:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 800104a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800104e:	3304      	adds	r3, #4
 8001050:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001054:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001058:	3304      	adds	r3, #4
 800105a:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800105e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001062:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001066:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbbb      	blt.n	8000fe8 <rf_heart_rate_and_oxygen_saturation+0x108>
  }

  // RF, remove linear trend (baseline leveling)
  beta_ir = rf_linear_regression_beta(an_x, mean_X, sum_X2);
 8001070:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001074:	eddf 0aca 	vldr	s1, [pc, #808]	@ 80013a0 <rf_heart_rate_and_oxygen_saturation+0x4c0>
 8001078:	ed9f 0aca 	vldr	s0, [pc, #808]	@ 80013a4 <rf_heart_rate_and_oxygen_saturation+0x4c4>
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f99d 	bl	80013bc <rf_linear_regression_beta>
 8001082:	ed87 0ad3 	vstr	s0, [r7, #844]	@ 0x34c
  beta_red = rf_linear_regression_beta(an_y, mean_X, sum_X2);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	eddf 0ac5 	vldr	s1, [pc, #788]	@ 80013a0 <rf_heart_rate_and_oxygen_saturation+0x4c0>
 800108e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80013a4 <rf_heart_rate_and_oxygen_saturation+0x4c4>
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f992 	bl	80013bc <rf_linear_regression_beta>
 8001098:	ed87 0ad2 	vstr	s0, [r7, #840]	@ 0x348
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 80010a2:	4bc1      	ldr	r3, [pc, #772]	@ (80013a8 <rf_heart_rate_and_oxygen_saturation+0x4c8>)
 80010a4:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 80010a8:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 80010ac:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80010b8:	e036      	b.n	8001128 <rf_heart_rate_and_oxygen_saturation+0x248>
    *ptr_x -= beta_ir*x;
 80010ba:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80010be:	ed93 7a00 	vldr	s14, [r3]
 80010c2:	edd7 6ad3 	vldr	s13, [r7, #844]	@ 0x34c
 80010c6:	edd7 7ad6 	vldr	s15, [r7, #856]	@ 0x358
 80010ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80010d6:	edc3 7a00 	vstr	s15, [r3]
    *ptr_y -= beta_red*x;
 80010da:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80010de:	ed93 7a00 	vldr	s14, [r3]
 80010e2:	edd7 6ad2 	vldr	s13, [r7, #840]	@ 0x348
 80010e6:	edd7 7ad6 	vldr	s15, [r7, #856]	@ 0x358
 80010ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f2:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80010f6:	edc3 7a00 	vstr	s15, [r3]
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 80010fa:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80010fe:	3301      	adds	r3, #1
 8001100:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001104:	edd7 7ad6 	vldr	s15, [r7, #856]	@ 0x358
 8001108:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800110c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001110:	edc7 7ad6 	vstr	s15, [r7, #856]	@ 0x358
 8001114:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001118:	3304      	adds	r3, #4
 800111a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800111e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001122:	3304      	adds	r3, #4
 8001124:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8001128:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800112c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001130:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	dbbf      	blt.n	80010ba <rf_heart_rate_and_oxygen_saturation+0x1da>
  }

    // For SpO2 calculate RMS of both AC signals. In addition, pulse detector needs raw sum of squares for IR
  f_y_ac=rf_rms(an_y,n_ir_buffer_length,&f_red_sumsq);
 800113a:	f507 724d 	add.w	r2, r7, #820	@ 0x334
 800113e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001142:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001146:	f107 0014 	add.w	r0, r7, #20
 800114a:	6819      	ldr	r1, [r3, #0]
 800114c:	f000 fad7 	bl	80016fe <rf_rms>
 8001150:	ed87 0ad1 	vstr	s0, [r7, #836]	@ 0x344
  f_x_ac=rf_rms(an_x,n_ir_buffer_length,&f_ir_sumsq);
 8001154:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8001158:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800115c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001160:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 8001164:	6819      	ldr	r1, [r3, #0]
 8001166:	f000 faca 	bl	80016fe <rf_rms>
 800116a:	ed87 0ad0 	vstr	s0, [r7, #832]	@ 0x340

  // Calculate Pearson correlation between red and IR
  *correl=rf_Pcorrelation(an_x, an_y, n_ir_buffer_length)/sqrt(f_red_sumsq*f_ir_sumsq);
 800116e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001172:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001176:	f107 0114 	add.w	r1, r7, #20
 800117a:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	f000 fb0d 	bl	800179e <rf_Pcorrelation>
 8001184:	ee10 3a10 	vmov	r3, s0
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f991 	bl	80004b0 <__aeabi_f2d>
 800118e:	4604      	mov	r4, r0
 8001190:	460d      	mov	r5, r1
 8001192:	ed97 7acd 	vldr	s14, [r7, #820]	@ 0x334
 8001196:	edd7 7ace 	vldr	s15, [r7, #824]	@ 0x338
 800119a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119e:	ee17 0a90 	vmov	r0, s15
 80011a2:	f7ff f985 	bl	80004b0 <__aeabi_f2d>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	ec43 2b10 	vmov	d0, r2, r3
 80011ae:	f004 fc1f 	bl	80059f0 <sqrt>
 80011b2:	ec53 2b10 	vmov	r2, r3, d0
 80011b6:	4620      	mov	r0, r4
 80011b8:	4629      	mov	r1, r5
 80011ba:	f7ff fafb 	bl	80007b4 <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fcc3 	bl	8000b50 <__aeabi_d2f>
 80011ca:	4602      	mov	r2, r0
 80011cc:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80011d0:	601a      	str	r2, [r3, #0]

  // Find signal periodicity
  if(*correl>=min_pearson_correlation) {
 80011d2:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80013ac <rf_heart_rate_and_oxygen_saturation+0x4cc>
 80011de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	db27      	blt.n	8001238 <rf_heart_rate_and_oxygen_saturation+0x358>
    // At the beginning of oximetry run the exact range of heart rate is unknown. This may lead to wrong rate if the next call does not find the _first_
    // peak of the autocorrelation function. E.g., second peak would yield only 50% of the true rate.
    if(LOWEST_PERIOD==n_last_peak_interval)
 80011e8:	4b71      	ldr	r3, [pc, #452]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d10c      	bne.n	800120a <rf_heart_rate_and_oxygen_saturation+0x32a>
      rf_initialize_periodicity_search(an_x, BUFFER_SIZE, &n_last_peak_interval, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq);
 80011f0:	edd7 7ace 	vldr	s15, [r7, #824]	@ 0x338
 80011f4:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 80011f8:	eef0 0a67 	vmov.f32	s1, s15
 80011fc:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001200:	2325      	movs	r3, #37	@ 0x25
 8001202:	4a6b      	ldr	r2, [pc, #428]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 8001204:	2164      	movs	r1, #100	@ 0x64
 8001206:	f000 f968 	bl	80014da <rf_initialize_periodicity_search>
    // RF, If correlation os good, then find average periodicity of the IR signal. If aperiodic, return periodicity of 0
    if(n_last_peak_interval!=0)
 800120a:	4b69      	ldr	r3, [pc, #420]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d015      	beq.n	800123e <rf_heart_rate_and_oxygen_saturation+0x35e>
      rf_signal_periodicity(an_x, BUFFER_SIZE, &n_last_peak_interval, LOWEST_PERIOD, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq, ratio);
 8001212:	edd7 7ace 	vldr	s15, [r7, #824]	@ 0x338
 8001216:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 800121a:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	2325      	movs	r3, #37	@ 0x25
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	eef0 0a67 	vmov.f32	s1, s15
 8001228:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800122c:	2308      	movs	r3, #8
 800122e:	4a60      	ldr	r2, [pc, #384]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 8001230:	2164      	movs	r1, #100	@ 0x64
 8001232:	f000 f9d1 	bl	80015d8 <rf_signal_periodicity>
 8001236:	e002      	b.n	800123e <rf_heart_rate_and_oxygen_saturation+0x35e>
  } else n_last_peak_interval=0;
 8001238:	4b5d      	ldr	r3, [pc, #372]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]

  // Calculate heart rate if periodicity detector was successful. Otherwise, reset peak interval to its initial value and report error.
  if(n_last_peak_interval!=0) {
 800123e:	4b5c      	ldr	r3, [pc, #368]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d029      	beq.n	800129a <rf_heart_rate_and_oxygen_saturation+0x3ba>
    *pn_heart_rate = (int32_t)(FS60/n_last_peak_interval);
 8001246:	4b5a      	ldr	r3, [pc, #360]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800124e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001252:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001256:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8001258:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
    *pch_spo2_valid  = 0;
    return;
  }

  // After trend removal, the mean represents DC level
  xy_ratio= (f_y_ac*f_ir_mean)/(f_x_ac*f_red_mean);  //formula is (f_y_ac*f_x_dc) / (f_x_ac*f_y_dc) ;
 8001260:	ed97 7ad1 	vldr	s14, [r7, #836]	@ 0x344
 8001264:	edd7 7ad8 	vldr	s15, [r7, #864]	@ 0x360
 8001268:	ee67 6a27 	vmul.f32	s13, s14, s15
 800126c:	ed97 7ad0 	vldr	s14, [r7, #832]	@ 0x340
 8001270:	edd7 7ad7 	vldr	s15, [r7, #860]	@ 0x35c
 8001274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800127c:	edc7 7acf 	vstr	s15, [r7, #828]	@ 0x33c
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 8001280:	f8d7 033c 	ldr.w	r0, [r7, #828]	@ 0x33c
 8001284:	f7ff f914 	bl	80004b0 <__aeabi_f2d>
 8001288:	a33b      	add	r3, pc, #236	@ (adr r3, 8001378 <rf_heart_rate_and_oxygen_saturation+0x498>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	f7ff fbf7 	bl	8000a80 <__aeabi_dcmpgt>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d117      	bne.n	80012c8 <rf_heart_rate_and_oxygen_saturation+0x3e8>
 8001298:	e05d      	b.n	8001356 <rf_heart_rate_and_oxygen_saturation+0x476>
    n_last_peak_interval=LOWEST_PERIOD;
 800129a:	4b45      	ldr	r3, [pc, #276]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800129c:	2208      	movs	r2, #8
 800129e:	601a      	str	r2, [r3, #0]
    *pn_heart_rate = -999; // unable to calculate because signal looks aperiodic
 80012a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80012a4:	4a43      	ldr	r2, [pc, #268]	@ (80013b4 <rf_heart_rate_and_oxygen_saturation+0x4d4>)
 80012a6:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 80012a8:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
    *pn_spo2 =  -999 ; // do not use SPO2 from this corrupt signal
 80012b0:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80012b4:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a3f      	ldr	r2, [pc, #252]	@ (80013b8 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 80012bc:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 80012be:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	e051      	b.n	800136c <rf_heart_rate_and_oxygen_saturation+0x48c>
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 80012c8:	f8d7 033c 	ldr.w	r0, [r7, #828]	@ 0x33c
 80012cc:	f7ff f8f0 	bl	80004b0 <__aeabi_f2d>
 80012d0:	a32b      	add	r3, pc, #172	@ (adr r3, 8001380 <rf_heart_rate_and_oxygen_saturation+0x4a0>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff fbb5 	bl	8000a44 <__aeabi_dcmplt>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d03a      	beq.n	8001356 <rf_heart_rate_and_oxygen_saturation+0x476>
    *pn_spo2 = (-45.060*xy_ratio + 30.354)*xy_ratio + 94.845;
 80012e0:	f8d7 033c 	ldr.w	r0, [r7, #828]	@ 0x33c
 80012e4:	f7ff f8e4 	bl	80004b0 <__aeabi_f2d>
 80012e8:	a327      	add	r3, pc, #156	@ (adr r3, 8001388 <rf_heart_rate_and_oxygen_saturation+0x4a8>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f937 	bl	8000560 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	a325      	add	r3, pc, #148	@ (adr r3, 8001390 <rf_heart_rate_and_oxygen_saturation+0x4b0>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7fe ff78 	bl	80001f4 <__adddf3>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4614      	mov	r4, r2
 800130a:	461d      	mov	r5, r3
 800130c:	f8d7 033c 	ldr.w	r0, [r7, #828]	@ 0x33c
 8001310:	f7ff f8ce 	bl	80004b0 <__aeabi_f2d>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4620      	mov	r0, r4
 800131a:	4629      	mov	r1, r5
 800131c:	f7ff f920 	bl	8000560 <__aeabi_dmul>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	a31b      	add	r3, pc, #108	@ (adr r3, 8001398 <rf_heart_rate_and_oxygen_saturation+0x4b8>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7fe ff61 	bl	80001f4 <__adddf3>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fc09 	bl	8000b50 <__aeabi_d2f>
 800133e:	4602      	mov	r2, r0
 8001340:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001344:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid = 1;
 800134c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e00a      	b.n	800136c <rf_heart_rate_and_oxygen_saturation+0x48c>
  } else {
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 8001356:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800135a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a15      	ldr	r2, [pc, #84]	@ (80013b8 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8001362:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8001364:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
  }
}
 800136c:	f507 775a 	add.w	r7, r7, #872	@ 0x368
 8001370:	46bd      	mov	sp, r7
 8001372:	bdb0      	pop	{r4, r5, r7, pc}
 8001374:	f3af 8000 	nop.w
 8001378:	47ae147b 	.word	0x47ae147b
 800137c:	3f947ae1 	.word	0x3f947ae1
 8001380:	d70a3d71 	.word	0xd70a3d71
 8001384:	3ffd70a3 	.word	0x3ffd70a3
 8001388:	147ae148 	.word	0x147ae148
 800138c:	c04687ae 	.word	0xc04687ae
 8001390:	be76c8b4 	.word	0xbe76c8b4
 8001394:	403e5a9f 	.word	0x403e5a9f
 8001398:	7ae147ae 	.word	0x7ae147ae
 800139c:	4057b614 	.word	0x4057b614
 80013a0:	47a2be80 	.word	0x47a2be80
 80013a4:	42460000 	.word	0x42460000
 80013a8:	c2460000 	.word	0xc2460000
 80013ac:	3f4ccccd 	.word	0x3f4ccccd
 80013b0:	20000000 	.word	0x20000000
 80013b4:	fffffc19 	.word	0xfffffc19
 80013b8:	c479c000 	.word	0xc479c000

080013bc <rf_linear_regression_beta>:
*               point index values (0 to BUFFER_SIZE-1). xmean must equal to (BUFFER_SIZE-1)/2! sum_x2 is
*               the sum of squares of the mean-centered index values.
*               Robert Fraczkiewicz, 12/22/2017
* \retval       Beta
*/
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	@ 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80013c8:	edc7 0a01 	vstr	s1, [r7, #4]
  float x,beta,*pn_ptr;
  beta=0.0;
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 80013d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d6:	eef1 7a67 	vneg.f32	s15, s15
 80013da:	edc7 7a07 	vstr	s15, [r7, #28]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	e017      	b.n	8001414 <rf_linear_regression_beta+0x58>
    beta+=x*(*pn_ptr);
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	ed93 7a00 	vldr	s14, [r3]
 80013ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80013ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80013f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fa:	edc7 7a06 	vstr	s15, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 80013fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001406:	ee77 7a87 	vadd.f32	s15, s15, s14
 800140a:	edc7 7a07 	vstr	s15, [r7, #28]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3304      	adds	r3, #4
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	ed97 7a07 	vldr	s14, [r7, #28]
 8001418:	edd7 7a02 	vldr	s15, [r7, #8]
 800141c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001424:	d9de      	bls.n	80013e4 <rf_linear_regression_beta+0x28>
  return beta/sum_x2;
 8001426:	ed97 7a06 	vldr	s14, [r7, #24]
 800142a:	edd7 7a01 	vldr	s15, [r7, #4]
 800142e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001432:	eef0 7a66 	vmov.f32	s15, s13
}
 8001436:	eeb0 0a67 	vmov.f32	s0, s15
 800143a:	3724      	adds	r7, #36	@ 0x24
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <rf_autocorrelation>:
* \par          Details
*               Compute autocorrelation sequence's n_lag's element for a given series pn_x
*               Robert Fraczkiewicz, 12/21/2017
* \retval       Autocorrelation sum
*/
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  int16_t i, n_temp=n_size-n_lag;
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	b29b      	uxth	r3, r3
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	827b      	strh	r3, [r7, #18]
  float sum=0.0,*pn_ptr;
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  if(n_temp<=0) return sum;
 8001464:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001468:	2b00      	cmp	r3, #0
 800146a:	dc02      	bgt.n	8001472 <rf_autocorrelation+0x2e>
 800146c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001470:	e02c      	b.n	80014cc <rf_autocorrelation+0x88>
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 8001472:	2300      	movs	r3, #0
 8001474:	83fb      	strh	r3, [r7, #30]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	e017      	b.n	80014ac <rf_autocorrelation+0x68>
    sum += (*pn_ptr)*(*(pn_ptr+n_lag));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	ed93 7a00 	vldr	s14, [r3]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4413      	add	r3, r2
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001492:	ed97 7a06 	vldr	s14, [r7, #24]
 8001496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149a:	edc7 7a06 	vstr	s15, [r7, #24]
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 800149e:	8bfb      	ldrh	r3, [r7, #30]
 80014a0:	3301      	adds	r3, #1
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	83fb      	strh	r3, [r7, #30]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3304      	adds	r3, #4
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80014b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbe1      	blt.n	800147c <rf_autocorrelation+0x38>
  }
  return sum/n_temp;
 80014b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c4:	edd7 6a06 	vldr	s13, [r7, #24]
 80014c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	3724      	adds	r7, #36	@ 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <rf_initialize_periodicity_search>:
*               of the autocorrelation at lag=0, then the input signal is insufficiently
*               periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 04/25/2020
* \retval       Average distance between peaks
*/
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b08a      	sub	sp, #40	@ 0x28
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6178      	str	r0, [r7, #20]
 80014e2:	6139      	str	r1, [r7, #16]
 80014e4:	60fa      	str	r2, [r7, #12]
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	ed87 0a01 	vstr	s0, [r7, #4]
 80014ec:	edc7 0a00 	vstr	s1, [r7]
  int32_t n_lag;
  float aut,aut_right;
  // At this point, *p_last_periodicity = LOWEST_PERIOD. Start walking to the right,
  // two steps at a time, until lag ratio fulfills quality criteria or HIGHEST_PERIOD
  // is reached.
  n_lag=*p_last_periodicity;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
  aut_right=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 80014f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014f8:	6939      	ldr	r1, [r7, #16]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ffa2 	bl	8001444 <rf_autocorrelation>
 8001500:	ed87 0a07 	vstr	s0, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	623b      	str	r3, [r7, #32]
  // Check sanity
  if(aut/aut_lag0 >= min_aut_ratio) {
 8001508:	edd7 6a07 	vldr	s13, [r7, #28]
 800150c:	ed97 7a00 	vldr	s14, [r7]
 8001510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001514:	ed97 7a01 	vldr	s14, [r7, #4]
 8001518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001520:	d82f      	bhi.n	8001582 <rf_initialize_periodicity_search+0xa8>
    // Either quality criterion, min_aut_ratio, is too low, or heart rate is too high.
    // Are we on autocorrelation's downward slope? If yes, continue to a local minimum.
    // If not, continue to the next block.
    do {
      aut=aut_right;
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	61fb      	str	r3, [r7, #28]
      n_lag+=2;
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	3302      	adds	r3, #2
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 800152c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800152e:	6939      	ldr	r1, [r7, #16]
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	f7ff ff87 	bl	8001444 <rf_autocorrelation>
 8001536:	ed87 0a08 	vstr	s0, [r7, #32]
    } while(aut_right/aut_lag0 >= min_aut_ratio && aut_right<aut && n_lag<=n_max_distance);
 800153a:	edd7 6a08 	vldr	s13, [r7, #32]
 800153e:	ed97 7a00 	vldr	s14, [r7]
 8001542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001546:	ed97 7a01 	vldr	s14, [r7, #4]
 800154a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	d80c      	bhi.n	800156e <rf_initialize_periodicity_search+0x94>
 8001554:	ed97 7a08 	vldr	s14, [r7, #32]
 8001558:	edd7 7a07 	vldr	s15, [r7, #28]
 800155c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d503      	bpl.n	800156e <rf_initialize_periodicity_search+0x94>
 8001566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	429a      	cmp	r2, r3
 800156c:	ddd9      	ble.n	8001522 <rf_initialize_periodicity_search+0x48>
    if(n_lag>n_max_distance) {
 800156e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	429a      	cmp	r2, r3
 8001574:	dd03      	ble.n	800157e <rf_initialize_periodicity_search+0xa4>
      // This should never happen, but if does return failure
      *p_last_periodicity=0;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
      return;
 800157c:	e029      	b.n	80015d2 <rf_initialize_periodicity_search+0xf8>
    }
    aut=aut_right;
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	61fb      	str	r3, [r7, #28]
  }
  // Walk to the right.
  do {
    aut=aut_right;
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	61fb      	str	r3, [r7, #28]
    n_lag+=2;
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	3302      	adds	r3, #2
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
    aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 800158c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800158e:	6939      	ldr	r1, [r7, #16]
 8001590:	6978      	ldr	r0, [r7, #20]
 8001592:	f7ff ff57 	bl	8001444 <rf_autocorrelation>
 8001596:	ed87 0a08 	vstr	s0, [r7, #32]
  } while(aut_right/aut_lag0 < min_aut_ratio && n_lag<=n_max_distance);
 800159a:	edd7 6a08 	vldr	s13, [r7, #32]
 800159e:	ed97 7a00 	vldr	s14, [r7]
 80015a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80015aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	dd03      	ble.n	80015bc <rf_initialize_periodicity_search+0xe2>
 80015b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dde2      	ble.n	8001582 <rf_initialize_periodicity_search+0xa8>
  if(n_lag>n_max_distance) {
 80015bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dd03      	ble.n	80015cc <rf_initialize_periodicity_search+0xf2>
    // This should never happen, but if does return failure
    *p_last_periodicity=0;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e002      	b.n	80015d2 <rf_initialize_periodicity_search+0xf8>
  } else
    *p_last_periodicity=n_lag;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d0:	601a      	str	r2, [r3, #0]
}
 80015d2:	3728      	adds	r7, #40	@ 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <rf_signal_periodicity>:
*               than min_aut_ratio fraction of the autocorrelation at lag=0, then the input
*               signal is insufficiently periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 01/07/2018
* \retval       Average distance between peaks
*/
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	@ 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6178      	str	r0, [r7, #20]
 80015e0:	6139      	str	r1, [r7, #16]
 80015e2:	60fa      	str	r2, [r7, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80015ea:	edc7 0a00 	vstr	s1, [r7]
  int32_t n_lag;
  float aut,aut_left,aut_right,aut_save;
  bool left_limit_reached=false;
 80015ee:	2300      	movs	r3, #0
 80015f0:	77fb      	strb	r3, [r7, #31]
  // Start from the last periodicity computing the corresponding autocorrelation
  n_lag=*p_last_periodicity;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  aut_save=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 80015f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015fa:	6939      	ldr	r1, [r7, #16]
 80015fc:	6978      	ldr	r0, [r7, #20]
 80015fe:	f7ff ff21 	bl	8001444 <rf_autocorrelation>
 8001602:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	61bb      	str	r3, [r7, #24]
  // Is autocorrelation one lag to the left greater?
  aut_left=aut;
 800160a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
  do {
    aut=aut_left;
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28
    n_lag--;
 8001612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001614:	3b01      	subs	r3, #1
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
    aut_left=rf_autocorrelation(pn_x, n_size, n_lag);
 8001618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800161a:	6939      	ldr	r1, [r7, #16]
 800161c:	6978      	ldr	r0, [r7, #20]
 800161e:	f7ff ff11 	bl	8001444 <rf_autocorrelation>
 8001622:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
  } while(aut_left>aut && n_lag>=n_min_distance);
 8001626:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800162a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800162e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	dd03      	ble.n	8001640 <rf_signal_periodicity+0x68>
 8001638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	429a      	cmp	r2, r3
 800163e:	dae6      	bge.n	800160e <rf_signal_periodicity+0x36>
  // Restore lag of the highest aut
  if(n_lag<n_min_distance) {
 8001640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	429a      	cmp	r2, r3
 8001646:	da07      	bge.n	8001658 <rf_signal_periodicity+0x80>
    left_limit_reached=true;
 8001648:	2301      	movs	r3, #1
 800164a:	77fb      	strb	r3, [r7, #31]
    n_lag=*p_last_periodicity;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	62fb      	str	r3, [r7, #44]	@ 0x2c
    aut=aut_save;
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001656:	e002      	b.n	800165e <rf_signal_periodicity+0x86>
  } else n_lag++;
 8001658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800165a:	3301      	adds	r3, #1
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(n_lag==*p_last_periodicity) {
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001664:	429a      	cmp	r2, r3
 8001666:	d12e      	bne.n	80016c6 <rf_signal_periodicity+0xee>
    // Trip to the left made no progress. Walk to the right.
    aut_right=aut;
 8001668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166a:	623b      	str	r3, [r7, #32]
    do {
      aut=aut_right;
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
      n_lag++;
 8001670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001672:	3301      	adds	r3, #1
 8001674:	62fb      	str	r3, [r7, #44]	@ 0x2c
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8001676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001678:	6939      	ldr	r1, [r7, #16]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff fee2 	bl	8001444 <rf_autocorrelation>
 8001680:	ed87 0a08 	vstr	s0, [r7, #32]
    } while(aut_right>aut && n_lag<=n_max_distance);
 8001684:	ed97 7a08 	vldr	s14, [r7, #32]
 8001688:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800168c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	dd03      	ble.n	800169e <rf_signal_periodicity+0xc6>
 8001696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800169a:	429a      	cmp	r2, r3
 800169c:	dde6      	ble.n	800166c <rf_signal_periodicity+0x94>
    // Restore lag of the highest aut
    if(n_lag>n_max_distance) n_lag=0; // Indicates failure
 800169e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a2:	429a      	cmp	r2, r3
 80016a4:	dd02      	ble.n	80016ac <rf_signal_periodicity+0xd4>
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016aa:	e002      	b.n	80016b2 <rf_signal_periodicity+0xda>
    else n_lag--;
 80016ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ae:	3b01      	subs	r3, #1
 80016b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if(n_lag==*p_last_periodicity && left_limit_reached) n_lag=0; // Indicates failure
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d104      	bne.n	80016c6 <rf_signal_periodicity+0xee>
 80016bc:	7ffb      	ldrb	r3, [r7, #31]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <rf_signal_periodicity+0xee>
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  *ratio=aut/aut_lag0;
 80016c6:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80016ca:	ed97 7a00 	vldr	s14, [r7]
 80016ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016d4:	edc3 7a00 	vstr	s15, [r3]
  if(*ratio < min_aut_ratio) n_lag=0; // Indicates failure
 80016d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	ed97 7a01 	vldr	s14, [r7, #4]
 80016e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	dd01      	ble.n	80016f0 <rf_signal_periodicity+0x118>
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  *p_last_periodicity=n_lag;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f4:	601a      	str	r2, [r3, #0]
}
 80016f6:	bf00      	nop
 80016f8:	3730      	adds	r7, #48	@ 0x30
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <rf_rms>:
* \par          Details
*               Compute root-mean-square variation for a given series pn_x
*               Robert Fraczkiewicz, 12/25/2017
* \retval       RMS value and raw sum of squares
*/
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b088      	sub	sp, #32
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*pn_ptr;
  (*sumsq)=0.0;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 8001712:	2300      	movs	r3, #0
 8001714:	83fb      	strh	r3, [r7, #30]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	e015      	b.n	8001748 <rf_rms+0x4a>
    r=(*pn_ptr);
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	617b      	str	r3, [r7, #20]
    (*sumsq) += r*r;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	ed93 7a00 	vldr	s14, [r3]
 8001728:	edd7 7a05 	vldr	s15, [r7, #20]
 800172c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	edc3 7a00 	vstr	s15, [r3]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 800173a:	8bfb      	ldrh	r3, [r7, #30]
 800173c:	3301      	adds	r3, #1
 800173e:	b29b      	uxth	r3, r3
 8001740:	83fb      	strh	r3, [r7, #30]
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	3304      	adds	r3, #4
 8001746:	61bb      	str	r3, [r7, #24]
 8001748:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	429a      	cmp	r2, r3
 8001750:	dce4      	bgt.n	800171c <rf_rms+0x1e>
  }
  (*sumsq)/=n_size; // This corresponds to autocorrelation at lag=0
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	edd3 6a00 	vldr	s13, [r3]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	edc3 7a00 	vstr	s15, [r3]
  return sqrt(*sumsq);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fe9d 	bl	80004b0 <__aeabi_f2d>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	ec43 2b10 	vmov	d0, r2, r3
 800177e:	f004 f937 	bl	80059f0 <sqrt>
 8001782:	ec53 2b10 	vmov	r2, r3, d0
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff f9e1 	bl	8000b50 <__aeabi_d2f>
 800178e:	4603      	mov	r3, r0
 8001790:	ee07 3a90 	vmov	s15, r3
}
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <rf_Pcorrelation>:
* \par          Details
*               Compute scalar product between *pn_x and *pn_y vectors
*               Robert Fraczkiewicz, 12/25/2017
* \retval       Correlation product
*/
{
 800179e:	b480      	push	{r7}
 80017a0:	b089      	sub	sp, #36	@ 0x24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*x_ptr,*y_ptr;
  r=0.0;
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 80017b0:	2300      	movs	r3, #0
 80017b2:	83fb      	strh	r3, [r7, #30]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	e017      	b.n	80017ee <rf_Pcorrelation+0x50>
    r+=(*x_ptr)*(*y_ptr);
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	ed93 7a00 	vldr	s14, [r3]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ce:	ed97 7a06 	vldr	s14, [r7, #24]
 80017d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d6:	edc7 7a06 	vstr	s15, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 80017da:	8bfb      	ldrh	r3, [r7, #30]
 80017dc:	3301      	adds	r3, #1
 80017de:	b29b      	uxth	r3, r3
 80017e0:	83fb      	strh	r3, [r7, #30]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3304      	adds	r3, #4
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	3304      	adds	r3, #4
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dce2      	bgt.n	80017be <rf_Pcorrelation+0x20>
  }
  r/=n_size;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001802:	edd7 6a06 	vldr	s13, [r7, #24]
 8001806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180a:	edc7 7a06 	vstr	s15, [r7, #24]
  return r;
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	ee07 3a90 	vmov	s15, r3
}
 8001814:	eeb0 0a67 	vmov.f32	s0, s15
 8001818:	3724      	adds	r7, #36	@ 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <DebugPrint>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void DebugPrint(const char *text)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)text, strlen(text), 100U);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7fe fcd3 	bl	80001d8 <strlen>
 8001832:	4603      	mov	r3, r0
 8001834:	b29a      	uxth	r2, r3
 8001836:	2364      	movs	r3, #100	@ 0x64
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4803      	ldr	r0, [pc, #12]	@ (8001848 <DebugPrint+0x24>)
 800183c:	f003 fd1c 	bl	8005278 <HAL_UART_Transmit>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200000e8 	.word	0x200000e8

0800184c <Max30102Setup>:


void Max30102Setup()
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
  uint8_t uch_dummy;

  maxim_max30102_reset();
 8001852:	f000 fb87 	bl	8001f64 <maxim_max30102_reset>
  maxim_max30102_read_reg(REG_INTR_STATUS_1, &uch_dummy);  // reads/clears the interrupt status register
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	4619      	mov	r1, r3
 800185a:	2000      	movs	r0, #0
 800185c:	f000 fac6 	bl	8001dec <maxim_max30102_read_reg>
  maxim_max30102_init();
 8001860:	f000 fade 	bl	8001e20 <maxim_max30102_init>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <Max30102Loop>:

// Takes samples from MAX30102.  Heart rate and SpO2 are calculated every ST seconds
void Max30102Loop()
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b094      	sub	sp, #80	@ 0x50
 8001870:	af06      	add	r7, sp, #24
  static uint32_t un_prev_data = 0UL;  	// variables to calculate the on-board LED brightness that reflects the heartbeats
  static float f_brightness = 0UL;
  float f_temp;

  // buffer length of BUFFER_SIZE stores ST seconds of samples running at FS sps
  for (i = 0U; i < BUFFER_SIZE; i++)
 8001872:	2300      	movs	r3, #0
 8001874:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001878:	e0a7      	b.n	80019ca <Max30102Loop+0x15e>
  {
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET);	// wait until the interrupt pin asserts
 800187a:	bf00      	nop
 800187c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001880:	489b      	ldr	r0, [pc, #620]	@ (8001af0 <Max30102Loop+0x284>)
 8001882:	f001 ffbb 	bl	80037fc <HAL_GPIO_ReadPin>
 8001886:	4603      	mov	r3, r0
 8001888:	2b01      	cmp	r3, #1
 800188a:	d0f7      	beq.n	800187c <Max30102Loop+0x10>

#ifdef FAKE_MAX30102_CLONE
    maxim_max30102_read_fifo((aun_ir_buffer + i), (aun_red_buffer + i));  // read from MAX30102 FIFO
#else
    maxim_max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i));  // read from MAX30102 FIFO
 800188c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4a98      	ldr	r2, [pc, #608]	@ (8001af4 <Max30102Loop+0x288>)
 8001894:	441a      	add	r2, r3
 8001896:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4996      	ldr	r1, [pc, #600]	@ (8001af8 <Max30102Loop+0x28c>)
 800189e:	440b      	add	r3, r1
 80018a0:	4619      	mov	r1, r3
 80018a2:	4610      	mov	r0, r2
 80018a4:	f000 faec 	bl	8001e80 <maxim_max30102_read_fifo>
#endif
    // calculate LED brightness
    if (aun_red_buffer[i] > un_prev_data)
 80018a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018ac:	4a91      	ldr	r2, [pc, #580]	@ (8001af4 <Max30102Loop+0x288>)
 80018ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018b2:	4b92      	ldr	r3, [pc, #584]	@ (8001afc <Max30102Loop+0x290>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d93d      	bls.n	8001936 <Max30102Loop+0xca>
    {
      f_temp = aun_red_buffer[i] - un_prev_data;
 80018ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018be:	4a8d      	ldr	r2, [pc, #564]	@ (8001af4 <Max30102Loop+0x288>)
 80018c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018c4:	4b8d      	ldr	r3, [pc, #564]	@ (8001afc <Max30102Loop+0x290>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	ee07 3a90 	vmov	s15, r3
 80018ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      f_temp /= (un_max - un_min);
 80018d6:	4b8a      	ldr	r3, [pc, #552]	@ (8001b00 <Max30102Loop+0x294>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b8a      	ldr	r3, [pc, #552]	@ (8001b04 <Max30102Loop+0x298>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018e8:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80018ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018f0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      f_temp *= MAX_BRIGHTNESS;
 80018f4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80018f8:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8001b08 <Max30102Loop+0x29c>
 80018fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001900:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      f_brightness -= 2.0f * f_temp;
 8001904:	4b81      	ldr	r3, [pc, #516]	@ (8001b0c <Max30102Loop+0x2a0>)
 8001906:	ed93 7a00 	vldr	s14, [r3]
 800190a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800190e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001916:	4b7d      	ldr	r3, [pc, #500]	@ (8001b0c <Max30102Loop+0x2a0>)
 8001918:	edc3 7a00 	vstr	s15, [r3]
      if (f_brightness < 0.0f)
 800191c:	4b7b      	ldr	r3, [pc, #492]	@ (8001b0c <Max30102Loop+0x2a0>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192a:	d542      	bpl.n	80019b2 <Max30102Loop+0x146>
      {
        f_brightness = 0.0f;
 800192c:	4b77      	ldr	r3, [pc, #476]	@ (8001b0c <Max30102Loop+0x2a0>)
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e03d      	b.n	80019b2 <Max30102Loop+0x146>
      }
    }
    else
    {
	  f_temp = un_prev_data - aun_red_buffer[i];
 8001936:	4b71      	ldr	r3, [pc, #452]	@ (8001afc <Max30102Loop+0x290>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800193e:	496d      	ldr	r1, [pc, #436]	@ (8001af4 <Max30102Loop+0x288>)
 8001940:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800194e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	  f_temp /= (un_max - un_min);
 8001952:	4b6b      	ldr	r3, [pc, #428]	@ (8001b00 <Max30102Loop+0x294>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b6b      	ldr	r3, [pc, #428]	@ (8001b04 <Max30102Loop+0x298>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001964:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800196c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	  f_temp *= MAX_BRIGHTNESS;
 8001970:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001974:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001b08 <Max30102Loop+0x29c>
 8001978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	  f_brightness += 2.0f * f_temp;
 8001980:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001984:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001988:	4b60      	ldr	r3, [pc, #384]	@ (8001b0c <Max30102Loop+0x2a0>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	4b5e      	ldr	r3, [pc, #376]	@ (8001b0c <Max30102Loop+0x2a0>)
 8001994:	edc3 7a00 	vstr	s15, [r3]
	  if (f_brightness > (float)MAX_BRIGHTNESS)
 8001998:	4b5c      	ldr	r3, [pc, #368]	@ (8001b0c <Max30102Loop+0x2a0>)
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001b08 <Max30102Loop+0x29c>
 80019a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	dd02      	ble.n	80019b2 <Max30102Loop+0x146>
	  {
		f_brightness = (float)MAX_BRIGHTNESS;
 80019ac:	4b57      	ldr	r3, [pc, #348]	@ (8001b0c <Max30102Loop+0x2a0>)
 80019ae:	4a58      	ldr	r2, [pc, #352]	@ (8001b10 <Max30102Loop+0x2a4>)
 80019b0:	601a      	str	r2, [r3, #0]
	  }
    }

    //SetPwmDutyCycle((uint8_t)(f_brightness * 100.0f / 256.0f));
    un_prev_data = aun_red_buffer[i];
 80019b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019b6:	4a4f      	ldr	r2, [pc, #316]	@ (8001af4 <Max30102Loop+0x288>)
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	4a4f      	ldr	r2, [pc, #316]	@ (8001afc <Max30102Loop+0x290>)
 80019be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < BUFFER_SIZE; i++)
 80019c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019c4:	3301      	adds	r3, #1
 80019c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80019ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019ce:	2b63      	cmp	r3, #99	@ 0x63
 80019d0:	f67f af53 	bls.w	800187a <Max30102Loop+0xe>
  }

  un_min = 0x3FFFFUL;
 80019d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001b04 <Max30102Loop+0x298>)
 80019d6:	4a4f      	ldr	r2, [pc, #316]	@ (8001b14 <Max30102Loop+0x2a8>)
 80019d8:	601a      	str	r2, [r3, #0]
  un_max = 0UL;
 80019da:	4b49      	ldr	r3, [pc, #292]	@ (8001b00 <Max30102Loop+0x294>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < BUFFER_SIZE; i++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80019e6:	e024      	b.n	8001a32 <Max30102Loop+0x1c6>
  {
    if (un_min > aun_red_buffer[i])
 80019e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019ec:	4a41      	ldr	r2, [pc, #260]	@ (8001af4 <Max30102Loop+0x288>)
 80019ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019f2:	4b44      	ldr	r3, [pc, #272]	@ (8001b04 <Max30102Loop+0x298>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d206      	bcs.n	8001a08 <Max30102Loop+0x19c>
    {
      un_min = aun_red_buffer[i];    //update signal min for next cycle using values from this cycle
 80019fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019fe:	4a3d      	ldr	r2, [pc, #244]	@ (8001af4 <Max30102Loop+0x288>)
 8001a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a04:	4a3f      	ldr	r2, [pc, #252]	@ (8001b04 <Max30102Loop+0x298>)
 8001a06:	6013      	str	r3, [r2, #0]
    }
    if (un_max < aun_red_buffer[i])
 8001a08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a0c:	4a39      	ldr	r2, [pc, #228]	@ (8001af4 <Max30102Loop+0x288>)
 8001a0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a12:	4b3b      	ldr	r3, [pc, #236]	@ (8001b00 <Max30102Loop+0x294>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d906      	bls.n	8001a28 <Max30102Loop+0x1bc>
    {
      un_max = aun_red_buffer[i];    //update signal max for next cycle using values from this cycle
 8001a1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a1e:	4a35      	ldr	r2, [pc, #212]	@ (8001af4 <Max30102Loop+0x288>)
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	4a36      	ldr	r2, [pc, #216]	@ (8001b00 <Max30102Loop+0x294>)
 8001a26:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < BUFFER_SIZE; i++)
 8001a28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001a32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a36:	2b63      	cmp	r3, #99	@ 0x63
 8001a38:	d9d6      	bls.n	80019e8 <Max30102Loop+0x17c>
    }
  }

  // calculate heart rate and SpO2 after BUFFER_SIZE samples (ST seconds of samples) using Robert's method
  rf_heart_rate_and_oxygen_saturation(aun_ir_buffer, BUFFER_SIZE, aun_red_buffer, &n_spo2, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid, &ratio, &correl);
 8001a3a:	f107 0218 	add.w	r2, r7, #24
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	9304      	str	r3, [sp, #16]
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	9303      	str	r3, [sp, #12]
 8001a4a:	1dfb      	adds	r3, r7, #7
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	f107 030f 	add.w	r3, r7, #15
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	4a25      	ldr	r2, [pc, #148]	@ (8001af4 <Max30102Loop+0x288>)
 8001a5e:	2164      	movs	r1, #100	@ 0x64
 8001a60:	4825      	ldr	r0, [pc, #148]	@ (8001af8 <Max30102Loop+0x28c>)
 8001a62:	f7ff fa3d 	bl	8000ee0 <rf_heart_rate_and_oxygen_saturation>

  // display results
  snprintf(buf, (size_t)8, "%d\r\n", ch_hr_valid);
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	f107 001c 	add.w	r0, r7, #28
 8001a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8001b18 <Max30102Loop+0x2ac>)
 8001a70:	2108      	movs	r1, #8
 8001a72:	f001 faa7 	bl	8002fc4 <snprintf_>
  DebugPrint(buf);
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fed2 	bl	8001824 <DebugPrint>
  snprintf(buf, (size_t)8, "%d\r\n", ch_spo2_valid);
 8001a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a84:	f107 001c 	add.w	r0, r7, #28
 8001a88:	4a23      	ldr	r2, [pc, #140]	@ (8001b18 <Max30102Loop+0x2ac>)
 8001a8a:	2108      	movs	r1, #8
 8001a8c:	f001 fa9a 	bl	8002fc4 <snprintf_>
  DebugPrint(buf);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fec5 	bl	8001824 <DebugPrint>
  if (ch_hr_valid && ch_spo2_valid)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d022      	beq.n	8001ae8 <Max30102Loop+0x27c>
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d01e      	beq.n	8001ae8 <Max30102Loop+0x27c>
  {
    MY_SNPRINTF(buf, (size_t)20, "%3.1f\t", n_spo2);
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fcff 	bl	80004b0 <__aeabi_f2d>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	f107 001c 	add.w	r0, r7, #28
 8001aba:	e9cd 2300 	strd	r2, r3, [sp]
 8001abe:	4a17      	ldr	r2, [pc, #92]	@ (8001b1c <Max30102Loop+0x2b0>)
 8001ac0:	2114      	movs	r1, #20
 8001ac2:	f001 fa7f 	bl	8002fc4 <snprintf_>
    DebugPrint(buf);
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff feaa 	bl	8001824 <DebugPrint>
    snprintf(buf, (size_t)20, "%d\r\n", n_heart_rate);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f107 001c 	add.w	r0, r7, #28
 8001ad6:	4a10      	ldr	r2, [pc, #64]	@ (8001b18 <Max30102Loop+0x2ac>)
 8001ad8:	2114      	movs	r1, #20
 8001ada:	f001 fa73 	bl	8002fc4 <snprintf_>
    DebugPrint(buf);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fe9e 	bl	8001824 <DebugPrint>
  }
  else
  {
    //DebugPrint("Not valid. Are you still alive?\r\n");
  }
}
 8001ae8:	bf00      	nop
 8001aea:	3738      	adds	r7, #56	@ 0x38
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40020400 	.word	0x40020400
 8001af4:	200002c0 	.word	0x200002c0
 8001af8:	20000130 	.word	0x20000130
 8001afc:	20000450 	.word	0x20000450
 8001b00:	20000454 	.word	0x20000454
 8001b04:	20000004 	.word	0x20000004
 8001b08:	437f0000 	.word	0x437f0000
 8001b0c:	20000458 	.word	0x20000458
 8001b10:	437f0000 	.word	0x437f0000
 8001b14:	0003ffff 	.word	0x0003ffff
 8001b18:	08005c78 	.word	0x08005c78
 8001b1c:	08005c80 	.word	0x08005c80

08001b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b24:	f001 fb8e 	bl	8003244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b28:	f000 f80c 	bl	8001b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2c:	f000 f8ce 	bl	8001ccc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b30:	f000 f8a2 	bl	8001c78 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001b34:	f000 f872 	bl	8001c1c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
  Max30102Setup();
 8001b38:	f7ff fe88 	bl	800184c <Max30102Setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	Max30102Loop();
 8001b3c:	f7ff fe96 	bl	800186c <Max30102Loop>
 8001b40:	e7fc      	b.n	8001b3c <main+0x1c>
	...

08001b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b094      	sub	sp, #80	@ 0x50
 8001b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4a:	f107 0320 	add.w	r3, r7, #32
 8001b4e:	2230      	movs	r2, #48	@ 0x30
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f004 f852 	bl	8005bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <SystemClock_Config+0xd0>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	4a28      	ldr	r2, [pc, #160]	@ (8001c14 <SystemClock_Config+0xd0>)
 8001b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b78:	4b26      	ldr	r3, [pc, #152]	@ (8001c14 <SystemClock_Config+0xd0>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b84:	2300      	movs	r3, #0
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	4b23      	ldr	r3, [pc, #140]	@ (8001c18 <SystemClock_Config+0xd4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b90:	4a21      	ldr	r2, [pc, #132]	@ (8001c18 <SystemClock_Config+0xd4>)
 8001b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <SystemClock_Config+0xd4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bac:	2310      	movs	r3, #16
 8001bae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001bb8:	2310      	movs	r3, #16
 8001bba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bbc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001bc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bca:	f107 0320 	add.w	r3, r7, #32
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fe6a 	bl	80048a8 <HAL_RCC_OscConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bda:	f000 f8e5 	bl	8001da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bde:	230f      	movs	r3, #15
 8001be0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be2:	2302      	movs	r3, #2
 8001be4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 f8cc 	bl	8004d98 <HAL_RCC_ClockConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c06:	f000 f8cf 	bl	8001da8 <Error_Handler>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	3750      	adds	r7, #80	@ 0x50
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40007000 	.word	0x40007000

08001c1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <MX_I2C1_Init+0x50>)
 8001c22:	4a13      	ldr	r2, [pc, #76]	@ (8001c70 <MX_I2C1_Init+0x54>)
 8001c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <MX_I2C1_Init+0x50>)
 8001c28:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <MX_I2C1_Init+0x58>)
 8001c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <MX_I2C1_Init+0x50>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <MX_I2C1_Init+0x50>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <MX_I2C1_Init+0x50>)
 8001c3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c40:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <MX_I2C1_Init+0x50>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <MX_I2C1_Init+0x50>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4c:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <MX_I2C1_Init+0x50>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <MX_I2C1_Init+0x50>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c58:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <MX_I2C1_Init+0x50>)
 8001c5a:	f001 fe01 	bl	8003860 <HAL_I2C_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c64:	f000 f8a0 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000094 	.word	0x20000094
 8001c70:	40005400 	.word	0x40005400
 8001c74:	00061a80 	.word	0x00061a80

08001c78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <MX_USART2_UART_Init+0x50>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	f003 fa92 	bl	80051d8 <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cba:	f000 f875 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200000e8 	.word	0x200000e8
 8001cc8:	40004400 	.word	0x40004400

08001ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d9c <MX_GPIO_Init+0xd0>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a2c      	ldr	r2, [pc, #176]	@ (8001d9c <MX_GPIO_Init+0xd0>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d9c <MX_GPIO_Init+0xd0>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b26      	ldr	r3, [pc, #152]	@ (8001d9c <MX_GPIO_Init+0xd0>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	4a25      	ldr	r2, [pc, #148]	@ (8001d9c <MX_GPIO_Init+0xd0>)
 8001d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0e:	4b23      	ldr	r3, [pc, #140]	@ (8001d9c <MX_GPIO_Init+0xd0>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <MX_GPIO_Init+0xd0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	4a1e      	ldr	r2, [pc, #120]	@ (8001d9c <MX_GPIO_Init+0xd0>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d9c <MX_GPIO_Init+0xd0>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <MX_GPIO_Init+0xd0>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a17      	ldr	r2, [pc, #92]	@ (8001d9c <MX_GPIO_Init+0xd0>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <MX_GPIO_Init+0xd0>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2120      	movs	r1, #32
 8001d56:	4812      	ldr	r0, [pc, #72]	@ (8001da0 <MX_GPIO_Init+0xd4>)
 8001d58:	f001 fd68 	bl	800382c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4619      	mov	r1, r3
 8001d72:	480c      	ldr	r0, [pc, #48]	@ (8001da4 <MX_GPIO_Init+0xd8>)
 8001d74:	f001 fbbe 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4804      	ldr	r0, [pc, #16]	@ (8001da0 <MX_GPIO_Init+0xd4>)
 8001d90:	f001 fbb0 	bl	80034f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	@ 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020800 	.word	0x40020800

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <Error_Handler+0x8>

08001db4 <maxim_max30102_write_reg>:
*
* \param[in]    uch_addr    - register address
* \param[in]    uch_data    - register data
*/
void maxim_max30102_write_reg(uint8_t uch_addr, uint8_t uch_data)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af04      	add	r7, sp, #16
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	71fb      	strb	r3, [r7, #7]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, I2C_WRITE_ADDR, uch_addr, 1U, &uch_data, 1U, 100U);
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	2364      	movs	r3, #100	@ 0x64
 8001dca:	9302      	str	r3, [sp, #8]
 8001dcc:	2301      	movs	r3, #1
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	1dbb      	adds	r3, r7, #6
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	21ae      	movs	r1, #174	@ 0xae
 8001dd8:	4803      	ldr	r0, [pc, #12]	@ (8001de8 <maxim_max30102_write_reg+0x34>)
 8001dda:	f001 fe85 	bl	8003ae8 <HAL_I2C_Mem_Write>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000094 	.word	0x20000094

08001dec <maxim_max30102_read_reg>:
*
* \param[in]    uch_addr    - register address
* \param[out]   puch_data    - pointer that stores the register data
*/
void maxim_max30102_read_reg(uint8_t uch_addr, uint8_t *puch_data)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af04      	add	r7, sp, #16
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, I2C_READ_ADDR, uch_addr, 1U, puch_data, 1U, 250U);
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	23fa      	movs	r3, #250	@ 0xfa
 8001dfe:	9302      	str	r3, [sp, #8]
 8001e00:	2301      	movs	r3, #1
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	21af      	movs	r1, #175	@ 0xaf
 8001e0c:	4803      	ldr	r0, [pc, #12]	@ (8001e1c <maxim_max30102_read_reg+0x30>)
 8001e0e:	f001 ff65 	bl	8003cdc <HAL_I2C_Mem_Read>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000094 	.word	0x20000094

08001e20 <maxim_max30102_init>:
* \par          Details
*               This function initializes the MAX30102
*
* \param        None
*/
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_INTR_ENABLE_1, 0xc0U); 	// INTR setting
 8001e24:	21c0      	movs	r1, #192	@ 0xc0
 8001e26:	2002      	movs	r0, #2
 8001e28:	f7ff ffc4 	bl	8001db4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_INTR_ENABLE_2, 0x00U);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2003      	movs	r0, #3
 8001e30:	f7ff ffc0 	bl	8001db4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_WR_PTR, 0x00U);  		//FIFO_WR_PTR[4:0]
 8001e34:	2100      	movs	r1, #0
 8001e36:	2004      	movs	r0, #4
 8001e38:	f7ff ffbc 	bl	8001db4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_OVF_COUNTER, 0x00U);  		//OVF_COUNTER[4:0]
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2005      	movs	r0, #5
 8001e40:	f7ff ffb8 	bl	8001db4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_RD_PTR, 0x00U);  		//FIFO_RD_PTR[4:0]
 8001e44:	2100      	movs	r1, #0
 8001e46:	2006      	movs	r0, #6
 8001e48:	f7ff ffb4 	bl	8001db4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_CONFIG, 0x4fU);  		//sample avg = 4, fifo rollover=false, fifo almost full = 17
 8001e4c:	214f      	movs	r1, #79	@ 0x4f
 8001e4e:	2008      	movs	r0, #8
 8001e50:	f7ff ffb0 	bl	8001db4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x03U);   	//0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
 8001e54:	2103      	movs	r1, #3
 8001e56:	2009      	movs	r0, #9
 8001e58:	f7ff ffac 	bl	8001db4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_SPO2_CONFIG, 0x27U);  		// SPO2_ADC range = 4096nA, SPO2 sample rate (100 Hz), LED pulseWidth (411uS)
 8001e5c:	2127      	movs	r1, #39	@ 0x27
 8001e5e:	200a      	movs	r0, #10
 8001e60:	f7ff ffa8 	bl	8001db4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED1_PA, 0x24U);   		//Choose value for ~ 7mA for LED1
 8001e64:	2124      	movs	r1, #36	@ 0x24
 8001e66:	200c      	movs	r0, #12
 8001e68:	f7ff ffa4 	bl	8001db4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED2_PA, 0x24U);   		// Choose value for ~ 7mA for LED2
 8001e6c:	2124      	movs	r1, #36	@ 0x24
 8001e6e:	200d      	movs	r0, #13
 8001e70:	f7ff ffa0 	bl	8001db4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_PILOT_PA, 0x7fU);   		// Choose value for ~ 25mA for Pilot LED
 8001e74:	217f      	movs	r1, #127	@ 0x7f
 8001e76:	2010      	movs	r0, #16
 8001e78:	f7ff ff9c 	bl	8001db4 <maxim_max30102_write_reg>
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <maxim_max30102_read_fifo>:
*
* \param[out]   *pun_red_led   - pointer that stores the red LED reading data
* \param[out]   *pun_ir_led    - pointer that stores the IR LED reading data
*/
void maxim_max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	@ 0x28
 8001e84:	af04      	add	r7, sp, #16
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t un_temp;
  uint8_t uch_temp;
  uint8_t uch_i2c_data[6];

  maxim_max30102_read_reg(REG_INTR_STATUS_1, &uch_temp);
 8001e8a:	f107 0313 	add.w	r3, r7, #19
 8001e8e:	4619      	mov	r1, r3
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff ffab 	bl	8001dec <maxim_max30102_read_reg>
  maxim_max30102_read_reg(REG_INTR_STATUS_2, &uch_temp);
 8001e96:	f107 0313 	add.w	r3, r7, #19
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f7ff ffa5 	bl	8001dec <maxim_max30102_read_reg>

  HAL_I2C_Mem_Read(&hi2c1, I2C_READ_ADDR, REG_FIFO_DATA, 1U, uch_i2c_data, 6U, 250U);
 8001ea2:	23fa      	movs	r3, #250	@ 0xfa
 8001ea4:	9302      	str	r3, [sp, #8]
 8001ea6:	2306      	movs	r3, #6
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	2207      	movs	r2, #7
 8001eb4:	21af      	movs	r1, #175	@ 0xaf
 8001eb6:	482a      	ldr	r0, [pc, #168]	@ (8001f60 <maxim_max30102_read_fifo+0xe0>)
 8001eb8:	f001 ff10 	bl	8003cdc <HAL_I2C_Mem_Read>

  *pun_ir_led = 0UL;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
  *pun_red_led = 0UL;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

  un_temp = (uint32_t)uch_i2c_data[0];
 8001ec8:	7b3b      	ldrb	r3, [r7, #12]
 8001eca:	617b      	str	r3, [r7, #20]
  un_temp <<= 16;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	041b      	lsls	r3, r3, #16
 8001ed0:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	441a      	add	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[1];
 8001ede:	7b7b      	ldrb	r3, [r7, #13]
 8001ee0:	617b      	str	r3, [r7, #20]
  un_temp <<= 8;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	441a      	add	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[2];
 8001ef4:	7bbb      	ldrb	r3, [r7, #14]
 8001ef6:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	441a      	add	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[3];
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	617b      	str	r3, [r7, #20]
  un_temp <<= 16;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	041b      	lsls	r3, r3, #16
 8001f0c:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	441a      	add	r2, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[4];
 8001f1a:	7c3b      	ldrb	r3, [r7, #16]
 8001f1c:	617b      	str	r3, [r7, #20]
  un_temp <<= 8;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	441a      	add	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[5];
 8001f30:	7c7b      	ldrb	r3, [r7, #17]
 8001f32:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	441a      	add	r2, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	601a      	str	r2, [r3, #0]
  *pun_red_led &= 0x03FFFF;  	// Mask MSB [23:18]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	601a      	str	r2, [r3, #0]
  *pun_ir_led &= 0x03FFFF;  	// Mask MSB [23:18]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	601a      	str	r2, [r3, #0]

}
 8001f58:	bf00      	nop
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000094 	.word	0x20000094

08001f64 <maxim_max30102_reset>:
*               This function resets the MAX30102
*
* \param        None
*/
void maxim_max30102_reset()
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x40U);
 8001f68:	2140      	movs	r1, #64	@ 0x40
 8001f6a:	2009      	movs	r0, #9
 8001f6c:	f7ff ff22 	bl	8001db4 <maxim_max30102_write_reg>
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	4603      	mov	r3, r0
 8001f82:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d204      	bcs.n	8001f96 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	701a      	strb	r2, [r3, #0]
  }
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4603      	mov	r3, r0
 8001fb0:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	e002      	b.n	8001fd4 <_strnlen_s+0x16>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <_strnlen_s+0x28>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	1e5a      	subs	r2, r3, #1
 8001fe0:	603a      	str	r2, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f3      	bne.n	8001fce <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	1ad3      	subs	r3, r2, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	2b2f      	cmp	r3, #47	@ 0x2f
 8002006:	d904      	bls.n	8002012 <_is_digit+0x1a>
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	2b39      	cmp	r3, #57	@ 0x39
 800200c:	d801      	bhi.n	8002012 <_is_digit+0x1a>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <_is_digit+0x1c>
 8002012:	2300      	movs	r3, #0
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	b2db      	uxtb	r3, r3
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002032:	e00e      	b.n	8002052 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4618      	mov	r0, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	1c59      	adds	r1, r3, #1
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6011      	str	r1, [r2, #0]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4403      	add	r3, r0
 800204e:	3b30      	subs	r3, #48	@ 0x30
 8002050:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ffcd 	bl	8001ff8 <_is_digit>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e7      	bne.n	8002034 <_atoi+0xe>
  }
  return i;
 8002064:	68fb      	ldr	r3, [r7, #12]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800206e:	b590      	push	{r4, r7, lr}
 8002070:	b087      	sub	sp, #28
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d125      	bne.n	80020d6 <_out_rev+0x68>
 800208a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d120      	bne.n	80020d6 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	e00a      	b.n	80020b0 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	1c53      	adds	r3, r2, #1
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	68fc      	ldr	r4, [r7, #12]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	2020      	movs	r0, #32
 80020a8:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d3f0      	bcc.n	800209a <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80020b8:	e00d      	b.n	80020d6 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80020ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020bc:	3b01      	subs	r3, #1
 80020be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c4:	4413      	add	r3, r2
 80020c6:	7818      	ldrb	r0, [r3, #0]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	1c53      	adds	r3, r2, #1
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	68fc      	ldr	r4, [r7, #12]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	47a0      	blx	r4
  while (len) {
 80020d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1ee      	bne.n	80020ba <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80020dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00e      	beq.n	8002104 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80020e6:	e007      	b.n	80020f8 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	1c53      	adds	r3, r2, #1
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	68fc      	ldr	r4, [r7, #12]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	2020      	movs	r0, #32
 80020f6:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002100:	429a      	cmp	r2, r3
 8002102:	d8f1      	bhi.n	80020e8 <_out_rev+0x7a>
    }
  }

  return idx;
 8002104:	687b      	ldr	r3, [r7, #4]
}
 8002106:	4618      	mov	r0, r3
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}

0800210e <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b088      	sub	sp, #32
 8002112:	af04      	add	r7, sp, #16
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800211c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d136      	bne.n	8002194 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d018      	beq.n	800215e <_ntoa_format+0x50>
 800212c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d013      	beq.n	800215e <_ntoa_format+0x50>
 8002136:	f897 3020 	ldrb.w	r3, [r7, #32]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d104      	bne.n	8002148 <_ntoa_format+0x3a>
 800213e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <_ntoa_format+0x50>
      width--;
 8002148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800214a:	3b01      	subs	r3, #1
 800214c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800214e:	e006      	b.n	800215e <_ntoa_format+0x50>
      buf[len++] = '0';
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	61fa      	str	r2, [r7, #28]
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4413      	add	r3, r2
 800215a:	2230      	movs	r2, #48	@ 0x30
 800215c:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002162:	429a      	cmp	r2, r3
 8002164:	d20a      	bcs.n	800217c <_ntoa_format+0x6e>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	2b1f      	cmp	r3, #31
 800216a:	d9f1      	bls.n	8002150 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800216c:	e006      	b.n	800217c <_ntoa_format+0x6e>
      buf[len++] = '0';
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	61fa      	str	r2, [r7, #28]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4413      	add	r3, r2
 8002178:	2230      	movs	r2, #48	@ 0x30
 800217a:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800217c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d006      	beq.n	8002194 <_ntoa_format+0x86>
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218a:	429a      	cmp	r2, r3
 800218c:	d202      	bcs.n	8002194 <_ntoa_format+0x86>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	2b1f      	cmp	r3, #31
 8002192:	d9ec      	bls.n	800216e <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	d058      	beq.n	8002250 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800219e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d116      	bne.n	80021d6 <_ntoa_format+0xc8>
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d013      	beq.n	80021d6 <_ntoa_format+0xc8>
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d003      	beq.n	80021be <_ntoa_format+0xb0>
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d10b      	bne.n	80021d6 <_ntoa_format+0xc8>
      len--;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <_ntoa_format+0xc8>
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d102      	bne.n	80021d6 <_ntoa_format+0xc8>
        len--;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d10f      	bne.n	80021fc <_ntoa_format+0xee>
 80021dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <_ntoa_format+0xee>
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	2b1f      	cmp	r3, #31
 80021ea:	d807      	bhi.n	80021fc <_ntoa_format+0xee>
      buf[len++] = 'x';
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	61fa      	str	r2, [r7, #28]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4413      	add	r3, r2
 80021f6:	2278      	movs	r2, #120	@ 0x78
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	e01f      	b.n	800223c <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d10f      	bne.n	8002222 <_ntoa_format+0x114>
 8002202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <_ntoa_format+0x114>
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2b1f      	cmp	r3, #31
 8002210:	d807      	bhi.n	8002222 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	61fa      	str	r2, [r7, #28]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4413      	add	r3, r2
 800221c:	2258      	movs	r2, #88	@ 0x58
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	e00c      	b.n	800223c <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	2b02      	cmp	r3, #2
 8002226:	d109      	bne.n	800223c <_ntoa_format+0x12e>
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	2b1f      	cmp	r3, #31
 800222c:	d806      	bhi.n	800223c <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	61fa      	str	r2, [r7, #28]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4413      	add	r3, r2
 8002238:	2262      	movs	r2, #98	@ 0x62
 800223a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	2b1f      	cmp	r3, #31
 8002240:	d806      	bhi.n	8002250 <_ntoa_format+0x142>
      buf[len++] = '0';
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	61fa      	str	r2, [r7, #28]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4413      	add	r3, r2
 800224c:	2230      	movs	r2, #48	@ 0x30
 800224e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2b1f      	cmp	r3, #31
 8002254:	d824      	bhi.n	80022a0 <_ntoa_format+0x192>
    if (negative) {
 8002256:	f897 3020 	ldrb.w	r3, [r7, #32]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <_ntoa_format+0x160>
      buf[len++] = '-';
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	61fa      	str	r2, [r7, #28]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4413      	add	r3, r2
 8002268:	222d      	movs	r2, #45	@ 0x2d
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e018      	b.n	80022a0 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800226e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	61fa      	str	r2, [r7, #28]
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4413      	add	r3, r2
 8002282:	222b      	movs	r2, #43	@ 0x2b
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	e00b      	b.n	80022a0 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	61fa      	str	r2, [r7, #28]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4413      	add	r3, r2
 800229c:	2220      	movs	r2, #32
 800229e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80022a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a2:	9303      	str	r3, [sp, #12]
 80022a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a6:	9302      	str	r3, [sp, #8]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f7ff fed9 	bl	800206e <_out_rev>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b096      	sub	sp, #88	@ 0x58
 80022ca:	af08      	add	r7, sp, #32
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 80022d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d103      	bne.n	80022e6 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80022de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e0:	f023 0310 	bic.w	r3, r3, #16
 80022e4:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80022e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <_ntoa_long+0x30>
 80022f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d032      	beq.n	800235c <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 80022f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80022fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002300:	fb01 f202 	mul.w	r2, r1, r2
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800230a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800230e:	2b09      	cmp	r3, #9
 8002310:	d804      	bhi.n	800231c <_ntoa_long+0x56>
 8002312:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002316:	3330      	adds	r3, #48	@ 0x30
 8002318:	b2da      	uxtb	r2, r3
 800231a:	e00d      	b.n	8002338 <_ntoa_long+0x72>
 800231c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <_ntoa_long+0x64>
 8002326:	2241      	movs	r2, #65	@ 0x41
 8002328:	e000      	b.n	800232c <_ntoa_long+0x66>
 800232a:	2261      	movs	r2, #97	@ 0x61
 800232c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002330:	4413      	add	r3, r2
 8002332:	b2db      	uxtb	r3, r3
 8002334:	3b0a      	subs	r3, #10
 8002336:	b2da      	uxtb	r2, r3
 8002338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800233a:	1c59      	adds	r1, r3, #1
 800233c:	6379      	str	r1, [r7, #52]	@ 0x34
 800233e:	3338      	adds	r3, #56	@ 0x38
 8002340:	443b      	add	r3, r7
 8002342:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002346:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002348:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <_ntoa_long+0x96>
 8002356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002358:	2b1f      	cmp	r3, #31
 800235a:	d9cc      	bls.n	80022f6 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800235c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235e:	9306      	str	r3, [sp, #24]
 8002360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002362:	9305      	str	r3, [sp, #20]
 8002364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002366:	9304      	str	r3, [sp, #16]
 8002368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800236a:	9303      	str	r3, [sp, #12]
 800236c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002370:	9302      	str	r3, [sp, #8]
 8002372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7ff fec3 	bl	800210e <_ntoa_format>
 8002388:	4603      	mov	r3, r0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3738      	adds	r7, #56	@ 0x38
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	0000      	movs	r0, r0
 8002394:	0000      	movs	r0, r0
	...

08002398 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b09d      	sub	sp, #116	@ 0x74
 800239c:	af04      	add	r7, sp, #16
 800239e:	6178      	str	r0, [r7, #20]
 80023a0:	6139      	str	r1, [r7, #16]
 80023a2:	60fa      	str	r2, [r7, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  double diff = 0.0;
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80023ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023c2:	f7fe fb35 	bl	8000a30 <__aeabi_dcmpeq>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10f      	bne.n	80023ec <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80023cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023ce:	9303      	str	r3, [sp, #12]
 80023d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023d2:	9302      	str	r3, [sp, #8]
 80023d4:	2303      	movs	r3, #3
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	4ba1      	ldr	r3, [pc, #644]	@ (8002660 <_ftoa+0x2c8>)
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	6939      	ldr	r1, [r7, #16]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff fe43 	bl	800206e <_out_rev>
 80023e8:	4603      	mov	r3, r0
 80023ea:	e213      	b.n	8002814 <_ftoa+0x47c>
  if (value < -DBL_MAX)
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 80023f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023f8:	f7fe fb24 	bl	8000a44 <__aeabi_dcmplt>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00f      	beq.n	8002422 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002402:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002404:	9303      	str	r3, [sp, #12]
 8002406:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002408:	9302      	str	r3, [sp, #8]
 800240a:	2304      	movs	r3, #4
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	4b95      	ldr	r3, [pc, #596]	@ (8002664 <_ftoa+0x2cc>)
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	6939      	ldr	r1, [r7, #16]
 8002418:	6978      	ldr	r0, [r7, #20]
 800241a:	f7ff fe28 	bl	800206e <_out_rev>
 800241e:	4603      	mov	r3, r0
 8002420:	e1f8      	b.n	8002814 <_ftoa+0x47c>
  if (value > DBL_MAX)
 8002422:	f04f 32ff 	mov.w	r2, #4294967295
 8002426:	4b90      	ldr	r3, [pc, #576]	@ (8002668 <_ftoa+0x2d0>)
 8002428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800242c:	f7fe fb28 	bl	8000a80 <__aeabi_dcmpgt>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01d      	beq.n	8002472 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002436:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <_ftoa+0xac>
 8002440:	4b8a      	ldr	r3, [pc, #552]	@ (800266c <_ftoa+0x2d4>)
 8002442:	e000      	b.n	8002446 <_ftoa+0xae>
 8002444:	4b8a      	ldr	r3, [pc, #552]	@ (8002670 <_ftoa+0x2d8>)
 8002446:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002448:	f002 0204 	and.w	r2, r2, #4
 800244c:	2a00      	cmp	r2, #0
 800244e:	d001      	beq.n	8002454 <_ftoa+0xbc>
 8002450:	2204      	movs	r2, #4
 8002452:	e000      	b.n	8002456 <_ftoa+0xbe>
 8002454:	2203      	movs	r2, #3
 8002456:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002458:	9103      	str	r1, [sp, #12]
 800245a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800245c:	9102      	str	r1, [sp, #8]
 800245e:	9201      	str	r2, [sp, #4]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	6939      	ldr	r1, [r7, #16]
 8002468:	6978      	ldr	r0, [r7, #20]
 800246a:	f7ff fe00 	bl	800206e <_out_rev>
 800246e:	4603      	mov	r3, r0
 8002470:	e1d0      	b.n	8002814 <_ftoa+0x47c>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002472:	a377      	add	r3, pc, #476	@ (adr r3, 8002650 <_ftoa+0x2b8>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800247c:	f7fe fb00 	bl	8000a80 <__aeabi_dcmpgt>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <_ftoa+0x102>
 8002486:	a374      	add	r3, pc, #464	@ (adr r3, 8002658 <_ftoa+0x2c0>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002490:	f7fe fad8 	bl	8000a44 <__aeabi_dcmplt>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <_ftoa+0x106>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
#else
    return 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	e1ba      	b.n	8002814 <_ftoa+0x47c>
#endif
  }

  // test for negative
  bool negative = false;
 800249e:	2300      	movs	r3, #0
 80024a0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  if (value < 0) {
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024b0:	f7fe fac8 	bl	8000a44 <__aeabi_dcmplt>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00e      	beq.n	80024d8 <_ftoa+0x140>
    negative = true;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    value = 0 - value;
 80024c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024c4:	f04f 0000 	mov.w	r0, #0
 80024c8:	f04f 0100 	mov.w	r1, #0
 80024cc:	f7fd fe90 	bl	80001f0 <__aeabi_dsub>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80024d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10d      	bne.n	80024fe <_ftoa+0x166>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80024e2:	2308      	movs	r3, #8
 80024e4:	673b      	str	r3, [r7, #112]	@ 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80024e6:	e00a      	b.n	80024fe <_ftoa+0x166>
    buf[len++] = '0';
 80024e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80024ee:	3360      	adds	r3, #96	@ 0x60
 80024f0:	443b      	add	r3, r7
 80024f2:	2230      	movs	r2, #48	@ 0x30
 80024f4:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80024f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024fa:	3b01      	subs	r3, #1
 80024fc:	673b      	str	r3, [r7, #112]	@ 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80024fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002500:	2b1f      	cmp	r3, #31
 8002502:	d802      	bhi.n	800250a <_ftoa+0x172>
 8002504:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002506:	2b09      	cmp	r3, #9
 8002508:	d8ee      	bhi.n	80024e8 <_ftoa+0x150>
  }

  int whole = (int)value;
 800250a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800250e:	f7fe fad7 	bl	8000ac0 <__aeabi_d2iz>
 8002512:	4603      	mov	r3, r0
 8002514:	657b      	str	r3, [r7, #84]	@ 0x54
  double tmp = (value - whole) * pow10[prec];
 8002516:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002518:	f7fd ffb8 	bl	800048c <__aeabi_i2d>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002524:	f7fd fe64 	bl	80001f0 <__aeabi_dsub>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	4a50      	ldr	r2, [pc, #320]	@ (8002674 <_ftoa+0x2dc>)
 8002532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f810 	bl	8000560 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  unsigned long frac = (unsigned long)tmp;
 8002548:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800254c:	f7fe fae0 	bl	8000b10 <__aeabi_d2uiz>
 8002550:	4603      	mov	r3, r0
 8002552:	653b      	str	r3, [r7, #80]	@ 0x50
  diff = tmp - frac;
 8002554:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002556:	f7fd ff89 	bl	800046c <__aeabi_ui2d>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002562:	f7fd fe45 	bl	80001f0 <__aeabi_dsub>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  if (diff > 0.5) {
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	4b41      	ldr	r3, [pc, #260]	@ (8002678 <_ftoa+0x2e0>)
 8002574:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002578:	f7fe fa82 	bl	8000a80 <__aeabi_dcmpgt>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <_ftoa+0x218>
    ++frac;
 8002582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002584:	3301      	adds	r3, #1
 8002586:	653b      	str	r3, [r7, #80]	@ 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002588:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800258a:	f7fd ff6f 	bl	800046c <__aeabi_ui2d>
 800258e:	4a39      	ldr	r2, [pc, #228]	@ (8002674 <_ftoa+0x2dc>)
 8002590:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259a:	f7fe fa67 	bl	8000a6c <__aeabi_dcmpge>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01a      	beq.n	80025da <_ftoa+0x242>
      frac = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	653b      	str	r3, [r7, #80]	@ 0x50
      ++whole;
 80025a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025aa:	3301      	adds	r3, #1
 80025ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80025ae:	e014      	b.n	80025da <_ftoa+0x242>
    }
  }
  else if (diff < 0.5) {
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	4b30      	ldr	r3, [pc, #192]	@ (8002678 <_ftoa+0x2e0>)
 80025b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025ba:	f7fe fa43 	bl	8000a44 <__aeabi_dcmplt>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <_ftoa+0x242>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80025c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <_ftoa+0x23c>
 80025ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <_ftoa+0x242>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80025d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025d6:	3301      	adds	r3, #1
 80025d8:	653b      	str	r3, [r7, #80]	@ 0x50
  }

  if (prec == 0U) {
 80025da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d134      	bne.n	800264a <_ftoa+0x2b2>
    diff = value - (double)whole;
 80025e0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80025e2:	f7fd ff53 	bl	800048c <__aeabi_i2d>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025ee:	f7fd fdff 	bl	80001f0 <__aeabi_dsub>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80025fa:	2301      	movs	r3, #1
 80025fc:	461c      	mov	r4, r3
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <_ftoa+0x2e0>)
 8002604:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002608:	f7fe fa1c 	bl	8000a44 <__aeabi_dcmplt>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <_ftoa+0x27e>
 8002612:	2300      	movs	r3, #0
 8002614:	461c      	mov	r4, r3
 8002616:	b2e3      	uxtb	r3, r4
 8002618:	f083 0301 	eor.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <_ftoa+0x29e>
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	4b14      	ldr	r3, [pc, #80]	@ (8002678 <_ftoa+0x2e0>)
 8002628:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800262c:	f7fe fa28 	bl	8000a80 <__aeabi_dcmpgt>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d063      	beq.n	80026fe <_ftoa+0x366>
 8002636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8080 	beq.w	8002742 <_ftoa+0x3aa>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002644:	3301      	adds	r3, #1
 8002646:	657b      	str	r3, [r7, #84]	@ 0x54
 8002648:	e07b      	b.n	8002742 <_ftoa+0x3aa>
    }
  }
  else {
    unsigned int count = prec;
 800264a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800264c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800264e:	e035      	b.n	80026bc <_ftoa+0x324>
 8002650:	00000000 	.word	0x00000000
 8002654:	41cdcd65 	.word	0x41cdcd65
 8002658:	00000000 	.word	0x00000000
 800265c:	c1cdcd65 	.word	0xc1cdcd65
 8002660:	08005c88 	.word	0x08005c88
 8002664:	08005c8c 	.word	0x08005c8c
 8002668:	7fefffff 	.word	0x7fefffff
 800266c:	08005c94 	.word	0x08005c94
 8002670:	08005c9c 	.word	0x08005c9c
 8002674:	08005ca0 	.word	0x08005ca0
 8002678:	3fe00000 	.word	0x3fe00000
      --count;
 800267c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800267e:	3b01      	subs	r3, #1
 8002680:	64fb      	str	r3, [r7, #76]	@ 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002682:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002684:	4b65      	ldr	r3, [pc, #404]	@ (800281c <_ftoa+0x484>)
 8002686:	fba3 2301 	umull	r2, r3, r3, r1
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	1aca      	subs	r2, r1, r3
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800269a:	1c59      	adds	r1, r3, #1
 800269c:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800269e:	3230      	adds	r2, #48	@ 0x30
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	3360      	adds	r3, #96	@ 0x60
 80026a4:	443b      	add	r3, r7
 80026a6:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80026aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026ac:	4a5b      	ldr	r2, [pc, #364]	@ (800281c <_ftoa+0x484>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	08db      	lsrs	r3, r3, #3
 80026b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80026b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <_ftoa+0x32c>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80026bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026be:	2b1f      	cmp	r3, #31
 80026c0:	d9dc      	bls.n	800267c <_ftoa+0x2e4>
 80026c2:	e009      	b.n	80026d8 <_ftoa+0x340>
        break;
 80026c4:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80026c6:	e007      	b.n	80026d8 <_ftoa+0x340>
      buf[len++] = '0';
 80026c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026ce:	3360      	adds	r3, #96	@ 0x60
 80026d0:	443b      	add	r3, r7
 80026d2:	2230      	movs	r2, #48	@ 0x30
 80026d4:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80026d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026da:	2b1f      	cmp	r3, #31
 80026dc:	d804      	bhi.n	80026e8 <_ftoa+0x350>
 80026de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ef      	bne.n	80026c8 <_ftoa+0x330>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80026e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026ea:	2b1f      	cmp	r3, #31
 80026ec:	d829      	bhi.n	8002742 <_ftoa+0x3aa>
      // add decimal
      buf[len++] = '.';
 80026ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026f4:	3360      	adds	r3, #96	@ 0x60
 80026f6:	443b      	add	r3, r7
 80026f8:	222e      	movs	r2, #46	@ 0x2e
 80026fa:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80026fe:	e020      	b.n	8002742 <_ftoa+0x3aa>
    buf[len++] = (char)(48 + (whole % 10));
 8002700:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002702:	4b47      	ldr	r3, [pc, #284]	@ (8002820 <_ftoa+0x488>)
 8002704:	fb83 1302 	smull	r1, r3, r3, r2
 8002708:	1099      	asrs	r1, r3, #2
 800270a:	17d3      	asrs	r3, r2, #31
 800270c:	1ac9      	subs	r1, r1, r3
 800270e:	460b      	mov	r3, r1
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	1ad1      	subs	r1, r2, r3
 8002718:	b2ca      	uxtb	r2, r1
 800271a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800271c:	1c59      	adds	r1, r3, #1
 800271e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8002720:	3230      	adds	r2, #48	@ 0x30
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	3360      	adds	r3, #96	@ 0x60
 8002726:	443b      	add	r3, r7
 8002728:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800272c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800272e:	4a3c      	ldr	r2, [pc, #240]	@ (8002820 <_ftoa+0x488>)
 8002730:	fb82 1203 	smull	r1, r2, r2, r3
 8002734:	1092      	asrs	r2, r2, #2
 8002736:	17db      	asrs	r3, r3, #31
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	657b      	str	r3, [r7, #84]	@ 0x54
 800273c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <_ftoa+0x3b2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002744:	2b1f      	cmp	r3, #31
 8002746:	d9db      	bls.n	8002700 <_ftoa+0x368>
 8002748:	e000      	b.n	800274c <_ftoa+0x3b4>
      break;
 800274a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800274c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d123      	bne.n	800279e <_ftoa+0x406>
 8002756:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01e      	beq.n	800279e <_ftoa+0x406>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002760:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002762:	2b00      	cmp	r3, #0
 8002764:	d014      	beq.n	8002790 <_ftoa+0x3f8>
 8002766:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800276a:	2b00      	cmp	r3, #0
 800276c:	d104      	bne.n	8002778 <_ftoa+0x3e0>
 800276e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <_ftoa+0x3f8>
      width--;
 8002778:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800277a:	3b01      	subs	r3, #1
 800277c:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800277e:	e007      	b.n	8002790 <_ftoa+0x3f8>
      buf[len++] = '0';
 8002780:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002786:	3360      	adds	r3, #96	@ 0x60
 8002788:	443b      	add	r3, r7
 800278a:	2230      	movs	r2, #48	@ 0x30
 800278c:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002790:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002792:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002794:	429a      	cmp	r2, r3
 8002796:	d202      	bcs.n	800279e <_ftoa+0x406>
 8002798:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800279a:	2b1f      	cmp	r3, #31
 800279c:	d9f0      	bls.n	8002780 <_ftoa+0x3e8>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800279e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027a0:	2b1f      	cmp	r3, #31
 80027a2:	d827      	bhi.n	80027f4 <_ftoa+0x45c>
    if (negative) {
 80027a4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <_ftoa+0x426>
      buf[len++] = '-';
 80027ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027b2:	3360      	adds	r3, #96	@ 0x60
 80027b4:	443b      	add	r3, r7
 80027b6:	222d      	movs	r2, #45	@ 0x2d
 80027b8:	f803 2c48 	strb.w	r2, [r3, #-72]
 80027bc:	e01a      	b.n	80027f4 <_ftoa+0x45c>
    }
    else if (flags & FLAGS_PLUS) {
 80027be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <_ftoa+0x442>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80027c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027ce:	3360      	adds	r3, #96	@ 0x60
 80027d0:	443b      	add	r3, r7
 80027d2:	222b      	movs	r2, #43	@ 0x2b
 80027d4:	f803 2c48 	strb.w	r2, [r3, #-72]
 80027d8:	e00c      	b.n	80027f4 <_ftoa+0x45c>
    }
    else if (flags & FLAGS_SPACE) {
 80027da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <_ftoa+0x45c>
      buf[len++] = ' ';
 80027e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027ea:	3360      	adds	r3, #96	@ 0x60
 80027ec:	443b      	add	r3, r7
 80027ee:	2220      	movs	r2, #32
 80027f0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80027f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027f6:	9303      	str	r3, [sp, #12]
 80027f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	f107 0318 	add.w	r3, r7, #24
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	6939      	ldr	r1, [r7, #16]
 800280c:	6978      	ldr	r0, [r7, #20]
 800280e:	f7ff fc2e 	bl	800206e <_out_rev>
 8002812:	4603      	mov	r3, r0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3764      	adds	r7, #100	@ 0x64
 8002818:	46bd      	mov	sp, r7
 800281a:	bd90      	pop	{r4, r7, pc}
 800281c:	cccccccd 	.word	0xcccccccd
 8002820:	66666667 	.word	0x66666667

08002824 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b099      	sub	sp, #100	@ 0x64
 8002828:	af06      	add	r7, sp, #24
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!buffer) {
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	f040 83ab 	bne.w	8002f94 <_vsnprintf+0x770>
    // use null output function
    out = _out_null;
 800283e:	4ba5      	ldr	r3, [pc, #660]	@ (8002ad4 <_vsnprintf+0x2b0>)
 8002840:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8002842:	e3a7      	b.n	8002f94 <_vsnprintf+0x770>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b25      	cmp	r3, #37	@ 0x25
 800284a:	d00c      	beq.n	8002866 <_vsnprintf+0x42>
      // no
      out(*format, buffer, idx++, maxlen);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	7818      	ldrb	r0, [r3, #0]
 8002850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002852:	1c53      	adds	r3, r2, #1
 8002854:	637b      	str	r3, [r7, #52]	@ 0x34
 8002856:	68fc      	ldr	r4, [r7, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	47a0      	blx	r4
      format++;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	603b      	str	r3, [r7, #0]
      continue;
 8002864:	e396      	b.n	8002f94 <_vsnprintf+0x770>
    }
    else {
      // yes, evaluate it
      format++;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	647b      	str	r3, [r7, #68]	@ 0x44
    do {
      switch (*format) {
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	3b20      	subs	r3, #32
 8002876:	2b10      	cmp	r3, #16
 8002878:	d856      	bhi.n	8002928 <_vsnprintf+0x104>
 800287a:	a201      	add	r2, pc, #4	@ (adr r2, 8002880 <_vsnprintf+0x5c>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	08002901 	.word	0x08002901
 8002884:	08002929 	.word	0x08002929
 8002888:	08002929 	.word	0x08002929
 800288c:	08002915 	.word	0x08002915
 8002890:	08002929 	.word	0x08002929
 8002894:	08002929 	.word	0x08002929
 8002898:	08002929 	.word	0x08002929
 800289c:	08002929 	.word	0x08002929
 80028a0:	08002929 	.word	0x08002929
 80028a4:	08002929 	.word	0x08002929
 80028a8:	08002929 	.word	0x08002929
 80028ac:	080028ed 	.word	0x080028ed
 80028b0:	08002929 	.word	0x08002929
 80028b4:	080028d9 	.word	0x080028d9
 80028b8:	08002929 	.word	0x08002929
 80028bc:	08002929 	.word	0x08002929
 80028c0:	080028c5 	.word	0x080028c5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80028c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	3301      	adds	r3, #1
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	2301      	movs	r3, #1
 80028d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028d6:	e02a      	b.n	800292e <_vsnprintf+0x10a>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80028d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028da:	f043 0302 	orr.w	r3, r3, #2
 80028de:	647b      	str	r3, [r7, #68]	@ 0x44
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	2301      	movs	r3, #1
 80028e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028ea:	e020      	b.n	800292e <_vsnprintf+0x10a>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80028ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	2301      	movs	r3, #1
 80028fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028fe:	e016      	b.n	800292e <_vsnprintf+0x10a>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002902:	f043 0308 	orr.w	r3, r3, #8
 8002906:	647b      	str	r3, [r7, #68]	@ 0x44
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	2301      	movs	r3, #1
 8002910:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002912:	e00c      	b.n	800292e <_vsnprintf+0x10a>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002916:	f043 0310 	orr.w	r3, r3, #16
 800291a:	647b      	str	r3, [r7, #68]	@ 0x44
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	3301      	adds	r3, #1
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	2301      	movs	r3, #1
 8002924:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002926:	e002      	b.n	800292e <_vsnprintf+0x10a>
        default :                                   n = 0U; break;
 8002928:	2300      	movs	r3, #0
 800292a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800292c:	bf00      	nop
      }
    } while (n);
 800292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002930:	2b00      	cmp	r3, #0
 8002932:	d19d      	bne.n	8002870 <_vsnprintf+0x4c>

    // evaluate width field
    width = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	643b      	str	r3, [r7, #64]	@ 0x40
    if (_is_digit(*format)) {
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fb5b 	bl	8001ff8 <_is_digit>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <_vsnprintf+0x130>
      width = _atoi(&format);
 8002948:	463b      	mov	r3, r7
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fb6b 	bl	8002026 <_atoi>
 8002950:	6438      	str	r0, [r7, #64]	@ 0x40
 8002952:	e018      	b.n	8002986 <_vsnprintf+0x162>
    }
    else if (*format == '*') {
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b2a      	cmp	r3, #42	@ 0x2a
 800295a:	d114      	bne.n	8002986 <_vsnprintf+0x162>
      const int w = va_arg(va, int);
 800295c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800295e:	1d1a      	adds	r2, r3, #4
 8002960:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	623b      	str	r3, [r7, #32]
      if (w < 0) {
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2b00      	cmp	r3, #0
 800296a:	da07      	bge.n	800297c <_vsnprintf+0x158>
        flags |= FLAGS_LEFT;    // reverse padding
 800296c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	647b      	str	r3, [r7, #68]	@ 0x44
        width = (unsigned int)-w;
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	425b      	negs	r3, r3
 8002978:	643b      	str	r3, [r7, #64]	@ 0x40
 800297a:	e001      	b.n	8002980 <_vsnprintf+0x15c>
      }
      else {
        width = (unsigned int)w;
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	643b      	str	r3, [r7, #64]	@ 0x40
      }
      format++;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	3301      	adds	r3, #1
 8002984:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (*format == '.') {
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002990:	d124      	bne.n	80029dc <_vsnprintf+0x1b8>
      flags |= FLAGS_PRECISION;
 8002992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002994:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002998:	647b      	str	r3, [r7, #68]	@ 0x44
      format++;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	3301      	adds	r3, #1
 800299e:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fb27 	bl	8001ff8 <_is_digit>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <_vsnprintf+0x198>
        precision = _atoi(&format);
 80029b0:	463b      	mov	r3, r7
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fb37 	bl	8002026 <_atoi>
 80029b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80029ba:	e00f      	b.n	80029dc <_vsnprintf+0x1b8>
      }
      else if (*format == '*') {
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80029c2:	d10b      	bne.n	80029dc <_vsnprintf+0x1b8>
        const int prec = (int)va_arg(va, int);
 80029c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029c6:	1d1a      	adds	r2, r3, #4
 80029c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61fb      	str	r3, [r7, #28]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80029d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        format++;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	3b68      	subs	r3, #104	@ 0x68
 80029e2:	2b12      	cmp	r3, #18
 80029e4:	d85e      	bhi.n	8002aa4 <_vsnprintf+0x280>
 80029e6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ec <_vsnprintf+0x1c8>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	08002a5f 	.word	0x08002a5f
 80029f0:	08002aa5 	.word	0x08002aa5
 80029f4:	08002a85 	.word	0x08002a85
 80029f8:	08002aa5 	.word	0x08002aa5
 80029fc:	08002a39 	.word	0x08002a39
 8002a00:	08002aa5 	.word	0x08002aa5
 8002a04:	08002aa5 	.word	0x08002aa5
 8002a08:	08002aa5 	.word	0x08002aa5
 8002a0c:	08002aa5 	.word	0x08002aa5
 8002a10:	08002aa5 	.word	0x08002aa5
 8002a14:	08002aa5 	.word	0x08002aa5
 8002a18:	08002aa5 	.word	0x08002aa5
 8002a1c:	08002aa5 	.word	0x08002aa5
 8002a20:	08002aa5 	.word	0x08002aa5
 8002a24:	08002aa5 	.word	0x08002aa5
 8002a28:	08002aa5 	.word	0x08002aa5
 8002a2c:	08002aa5 	.word	0x08002aa5
 8002a30:	08002aa5 	.word	0x08002aa5
 8002a34:	08002a95 	.word	0x08002a95
      case 'l' :
        flags |= FLAGS_LONG;
 8002a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3e:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	3301      	adds	r3, #1
 8002a44:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b6c      	cmp	r3, #108	@ 0x6c
 8002a4c:	d12c      	bne.n	8002aa8 <_vsnprintf+0x284>
          flags |= FLAGS_LONG_LONG;
 8002a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a54:	647b      	str	r3, [r7, #68]	@ 0x44
          format++;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	603b      	str	r3, [r7, #0]
        }
        break;
 8002a5c:	e024      	b.n	8002aa8 <_vsnprintf+0x284>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a64:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b68      	cmp	r3, #104	@ 0x68
 8002a72:	d11b      	bne.n	8002aac <_vsnprintf+0x288>
          flags |= FLAGS_CHAR;
 8002a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a7a:	647b      	str	r3, [r7, #68]	@ 0x44
          format++;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	603b      	str	r3, [r7, #0]
        }
        break;
 8002a82:	e013      	b.n	8002aac <_vsnprintf+0x288>
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a8a:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	603b      	str	r3, [r7, #0]
        break;
 8002a92:	e00c      	b.n	8002aae <_vsnprintf+0x28a>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a9a:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	603b      	str	r3, [r7, #0]
        break;
 8002aa2:	e004      	b.n	8002aae <_vsnprintf+0x28a>
      default :
        break;
 8002aa4:	bf00      	nop
 8002aa6:	e002      	b.n	8002aae <_vsnprintf+0x28a>
        break;
 8002aa8:	bf00      	nop
 8002aaa:	e000      	b.n	8002aae <_vsnprintf+0x28a>
        break;
 8002aac:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b78      	cmp	r3, #120	@ 0x78
 8002ab4:	f300 8261 	bgt.w	8002f7a <_vsnprintf+0x756>
 8002ab8:	2b69      	cmp	r3, #105	@ 0x69
 8002aba:	da0d      	bge.n	8002ad8 <_vsnprintf+0x2b4>
 8002abc:	2b25      	cmp	r3, #37	@ 0x25
 8002abe:	f000 8250 	beq.w	8002f62 <_vsnprintf+0x73e>
 8002ac2:	2b25      	cmp	r3, #37	@ 0x25
 8002ac4:	f2c0 8259 	blt.w	8002f7a <_vsnprintf+0x756>
 8002ac8:	2b66      	cmp	r3, #102	@ 0x66
 8002aca:	f300 8256 	bgt.w	8002f7a <_vsnprintf+0x756>
 8002ace:	2b46      	cmp	r3, #70	@ 0x46
 8002ad0:	da25      	bge.n	8002b1e <_vsnprintf+0x2fa>
 8002ad2:	e252      	b.n	8002f7a <_vsnprintf+0x756>
 8002ad4:	08001fa3 	.word	0x08001fa3
 8002ad8:	3b69      	subs	r3, #105	@ 0x69
 8002ada:	2201      	movs	r2, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	f249 0241 	movw	r2, #36929	@ 0x9041
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	2a00      	cmp	r2, #0
 8002ae8:	bf14      	ite	ne
 8002aea:	2201      	movne	r2, #1
 8002aec:	2200      	moveq	r2, #0
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	2a00      	cmp	r2, #0
 8002af2:	d15d      	bne.n	8002bb0 <_vsnprintf+0x38c>
 8002af4:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002af8:	2a00      	cmp	r2, #0
 8002afa:	bf14      	ite	ne
 8002afc:	2201      	movne	r2, #1
 8002afe:	2200      	moveq	r2, #0
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	2a00      	cmp	r2, #0
 8002b04:	f040 820c 	bne.w	8002f20 <_vsnprintf+0x6fc>
 8002b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf14      	ite	ne
 8002b10:	2301      	movne	r3, #1
 8002b12:	2300      	moveq	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f040 81a0 	bne.w	8002e5c <_vsnprintf+0x638>
 8002b1c:	e22d      	b.n	8002f7a <_vsnprintf+0x756>
 8002b1e:	3b46      	subs	r3, #70	@ 0x46
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	f200 822a 	bhi.w	8002f7a <_vsnprintf+0x756>
 8002b26:	a201      	add	r2, pc, #4	@ (adr r2, 8002b2c <_vsnprintf+0x308>)
 8002b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2c:	08002d9d 	.word	0x08002d9d
 8002b30:	08002f7b 	.word	0x08002f7b
 8002b34:	08002f7b 	.word	0x08002f7b
 8002b38:	08002f7b 	.word	0x08002f7b
 8002b3c:	08002f7b 	.word	0x08002f7b
 8002b40:	08002f7b 	.word	0x08002f7b
 8002b44:	08002f7b 	.word	0x08002f7b
 8002b48:	08002f7b 	.word	0x08002f7b
 8002b4c:	08002f7b 	.word	0x08002f7b
 8002b50:	08002f7b 	.word	0x08002f7b
 8002b54:	08002f7b 	.word	0x08002f7b
 8002b58:	08002f7b 	.word	0x08002f7b
 8002b5c:	08002f7b 	.word	0x08002f7b
 8002b60:	08002f7b 	.word	0x08002f7b
 8002b64:	08002f7b 	.word	0x08002f7b
 8002b68:	08002f7b 	.word	0x08002f7b
 8002b6c:	08002f7b 	.word	0x08002f7b
 8002b70:	08002f7b 	.word	0x08002f7b
 8002b74:	08002bb1 	.word	0x08002bb1
 8002b78:	08002f7b 	.word	0x08002f7b
 8002b7c:	08002f7b 	.word	0x08002f7b
 8002b80:	08002f7b 	.word	0x08002f7b
 8002b84:	08002f7b 	.word	0x08002f7b
 8002b88:	08002f7b 	.word	0x08002f7b
 8002b8c:	08002f7b 	.word	0x08002f7b
 8002b90:	08002f7b 	.word	0x08002f7b
 8002b94:	08002f7b 	.word	0x08002f7b
 8002b98:	08002f7b 	.word	0x08002f7b
 8002b9c:	08002bb1 	.word	0x08002bb1
 8002ba0:	08002de9 	.word	0x08002de9
 8002ba4:	08002bb1 	.word	0x08002bb1
 8002ba8:	08002f7b 	.word	0x08002f7b
 8002bac:	08002d9d 	.word	0x08002d9d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b78      	cmp	r3, #120	@ 0x78
 8002bb6:	d003      	beq.n	8002bc0 <_vsnprintf+0x39c>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b58      	cmp	r3, #88	@ 0x58
 8002bbe:	d102      	bne.n	8002bc6 <_vsnprintf+0x3a2>
          base = 16U;
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bc4:	e013      	b.n	8002bee <_vsnprintf+0x3ca>
        }
        else if (*format == 'o') {
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b6f      	cmp	r3, #111	@ 0x6f
 8002bcc:	d102      	bne.n	8002bd4 <_vsnprintf+0x3b0>
          base =  8U;
 8002bce:	2308      	movs	r3, #8
 8002bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bd2:	e00c      	b.n	8002bee <_vsnprintf+0x3ca>
        }
        else if (*format == 'b') {
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b62      	cmp	r3, #98	@ 0x62
 8002bda:	d102      	bne.n	8002be2 <_vsnprintf+0x3be>
          base =  2U;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	633b      	str	r3, [r7, #48]	@ 0x30
 8002be0:	e005      	b.n	8002bee <_vsnprintf+0x3ca>
        }
        else {
          base = 10U;
 8002be2:	230a      	movs	r3, #10
 8002be4:	633b      	str	r3, [r7, #48]	@ 0x30
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002be8:	f023 0310 	bic.w	r3, r3, #16
 8002bec:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        // uppercase
        if (*format == 'X') {
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b58      	cmp	r3, #88	@ 0x58
 8002bf4:	d103      	bne.n	8002bfe <_vsnprintf+0x3da>
          flags |= FLAGS_UPPERCASE;
 8002bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bf8:	f043 0320 	orr.w	r3, r3, #32
 8002bfc:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b69      	cmp	r3, #105	@ 0x69
 8002c04:	d007      	beq.n	8002c16 <_vsnprintf+0x3f2>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b64      	cmp	r3, #100	@ 0x64
 8002c0c:	d003      	beq.n	8002c16 <_vsnprintf+0x3f2>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c10:	f023 030c 	bic.w	r3, r3, #12
 8002c14:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <_vsnprintf+0x404>
          flags &= ~FLAGS_ZEROPAD;
 8002c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b69      	cmp	r3, #105	@ 0x69
 8002c2e:	d003      	beq.n	8002c38 <_vsnprintf+0x414>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b64      	cmp	r3, #100	@ 0x64
 8002c36:	d15e      	bne.n	8002cf6 <_vsnprintf+0x4d2>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 80a8 	bne.w	8002d94 <_vsnprintf+0x570>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01e      	beq.n	8002c8c <_vsnprintf+0x468>
            const long value = va_arg(va, long);
 8002c4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c50:	1d1a      	adds	r2, r3, #4
 8002c52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	613b      	str	r3, [r7, #16]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bfb8      	it	lt
 8002c5e:	425b      	neglt	r3, r3
 8002c60:	4619      	mov	r1, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	0fdb      	lsrs	r3, r3, #31
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c6a:	9205      	str	r2, [sp, #20]
 8002c6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c6e:	9204      	str	r2, [sp, #16]
 8002c70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c72:	9203      	str	r2, [sp, #12]
 8002c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c76:	9202      	str	r2, [sp, #8]
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	9100      	str	r1, [sp, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff fb1f 	bl	80022c6 <_ntoa_long>
 8002c88:	6378      	str	r0, [r7, #52]	@ 0x34
          if (flags & FLAGS_LONG_LONG) {
 8002c8a:	e083      	b.n	8002d94 <_vsnprintf+0x570>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <_vsnprintf+0x47e>
 8002c96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c98:	1d1a      	adds	r2, r3, #4
 8002c9a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	e00e      	b.n	8002cc0 <_vsnprintf+0x49c>
 8002ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <_vsnprintf+0x494>
 8002cac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cae:	1d1a      	adds	r2, r3, #4
 8002cb0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	b21b      	sxth	r3, r3
 8002cb6:	e003      	b.n	8002cc0 <_vsnprintf+0x49c>
 8002cb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cba:	1d1a      	adds	r2, r3, #4
 8002cbc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	617b      	str	r3, [r7, #20]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bfb8      	it	lt
 8002cc8:	425b      	neglt	r3, r3
 8002cca:	4619      	mov	r1, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	0fdb      	lsrs	r3, r3, #31
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cd4:	9205      	str	r2, [sp, #20]
 8002cd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cd8:	9204      	str	r2, [sp, #16]
 8002cda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cdc:	9203      	str	r2, [sp, #12]
 8002cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce0:	9202      	str	r2, [sp, #8]
 8002ce2:	9301      	str	r3, [sp, #4]
 8002ce4:	9100      	str	r1, [sp, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f7ff faea 	bl	80022c6 <_ntoa_long>
 8002cf2:	6378      	str	r0, [r7, #52]	@ 0x34
          if (flags & FLAGS_LONG_LONG) {
 8002cf4:	e04e      	b.n	8002d94 <_vsnprintf+0x570>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d149      	bne.n	8002d94 <_vsnprintf+0x570>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <_vsnprintf+0x514>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002d0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d0c:	1d1a      	adds	r2, r3, #4
 8002d0e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d14:	9205      	str	r2, [sp, #20]
 8002d16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d18:	9204      	str	r2, [sp, #16]
 8002d1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d1c:	9203      	str	r2, [sp, #12]
 8002d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d20:	9202      	str	r2, [sp, #8]
 8002d22:	2200      	movs	r2, #0
 8002d24:	9201      	str	r2, [sp, #4]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f7ff fac9 	bl	80022c6 <_ntoa_long>
 8002d34:	6378      	str	r0, [r7, #52]	@ 0x34
 8002d36:	e02d      	b.n	8002d94 <_vsnprintf+0x570>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <_vsnprintf+0x52a>
 8002d42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d44:	1d1a      	adds	r2, r3, #4
 8002d46:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	e00e      	b.n	8002d6c <_vsnprintf+0x548>
 8002d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <_vsnprintf+0x540>
 8002d58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d5a:	1d1a      	adds	r2, r3, #4
 8002d5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	e003      	b.n	8002d6c <_vsnprintf+0x548>
 8002d64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d66:	1d1a      	adds	r2, r3, #4
 8002d68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	61bb      	str	r3, [r7, #24]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002d6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d70:	9305      	str	r3, [sp, #20]
 8002d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d74:	9304      	str	r3, [sp, #16]
 8002d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d78:	9303      	str	r3, [sp, #12]
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7c:	9302      	str	r3, [sp, #8]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f7ff fa9a 	bl	80022c6 <_ntoa_long>
 8002d92:	6378      	str	r0, [r7, #52]	@ 0x34
          }
        }
        format++;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	3301      	adds	r3, #1
 8002d98:	603b      	str	r3, [r7, #0]
        break;
 8002d9a:	e0fb      	b.n	8002f94 <_vsnprintf+0x770>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b46      	cmp	r3, #70	@ 0x46
 8002da2:	d103      	bne.n	8002dac <_vsnprintf+0x588>
 8002da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002da6:	f043 0320 	orr.w	r3, r3, #32
 8002daa:	647b      	str	r3, [r7, #68]	@ 0x44
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002dac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dae:	3307      	adds	r3, #7
 8002db0:	f023 0307 	bic.w	r3, r3, #7
 8002db4:	f103 0208 	add.w	r2, r3, #8
 8002db8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002dba:	ed93 7b00 	vldr	d7, [r3]
 8002dbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc0:	9302      	str	r3, [sp, #8]
 8002dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	eeb0 0a47 	vmov.f32	s0, s14
 8002dce:	eef0 0a67 	vmov.f32	s1, s15
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff fadd 	bl	8002398 <_ftoa>
 8002dde:	6378      	str	r0, [r7, #52]	@ 0x34
        format++;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	3301      	adds	r3, #1
 8002de4:	603b      	str	r3, [r7, #0]
        break;
 8002de6:	e0d5      	b.n	8002f94 <_vsnprintf+0x770>
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002de8:	2301      	movs	r3, #1
 8002dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10e      	bne.n	8002e14 <_vsnprintf+0x5f0>
          while (l++ < width) {
 8002df6:	e007      	b.n	8002e08 <_vsnprintf+0x5e4>
            out(' ', buffer, idx++, maxlen);
 8002df8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002dfa:	1c53      	adds	r3, r2, #1
 8002dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dfe:	68fc      	ldr	r4, [r7, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	2020      	movs	r0, #32
 8002e06:	47a0      	blx	r4
          while (l++ < width) {
 8002e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d8f1      	bhi.n	8002df8 <_vsnprintf+0x5d4>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002e14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e16:	1d1a      	adds	r2, r3, #4
 8002e18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	b2d8      	uxtb	r0, r3
 8002e1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e20:	1c53      	adds	r3, r2, #1
 8002e22:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e24:	68fc      	ldr	r4, [r7, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8002e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00e      	beq.n	8002e54 <_vsnprintf+0x630>
          while (l++ < width) {
 8002e36:	e007      	b.n	8002e48 <_vsnprintf+0x624>
            out(' ', buffer, idx++, maxlen);
 8002e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e3a:	1c53      	adds	r3, r2, #1
 8002e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e3e:	68fc      	ldr	r4, [r7, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	2020      	movs	r0, #32
 8002e46:	47a0      	blx	r4
          while (l++ < width) {
 8002e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d8f1      	bhi.n	8002e38 <_vsnprintf+0x614>
          }
        }
        format++;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	3301      	adds	r3, #1
 8002e58:	603b      	str	r3, [r7, #0]
        break;
 8002e5a:	e09b      	b.n	8002f94 <_vsnprintf+0x770>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8002e5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e5e:	1d1a      	adds	r2, r3, #4
 8002e60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	62bb      	str	r3, [r7, #40]	@ 0x28
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <_vsnprintf+0x64c>
 8002e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e6e:	e001      	b.n	8002e74 <_vsnprintf+0x650>
 8002e70:	f04f 33ff 	mov.w	r3, #4294967295
 8002e74:	4619      	mov	r1, r3
 8002e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e78:	f7ff f8a1 	bl	8001fbe <_strnlen_s>
 8002e7c:	6278      	str	r0, [r7, #36]	@ 0x24
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <_vsnprintf+0x670>
          l = (l < precision ? l : precision);
 8002e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	bf28      	it	cs
 8002e90:	4613      	movcs	r3, r2
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (!(flags & FLAGS_LEFT)) {
 8002e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11a      	bne.n	8002ed4 <_vsnprintf+0x6b0>
          while (l++ < width) {
 8002e9e:	e007      	b.n	8002eb0 <_vsnprintf+0x68c>
            out(' ', buffer, idx++, maxlen);
 8002ea0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ea2:	1c53      	adds	r3, r2, #1
 8002ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ea6:	68fc      	ldr	r4, [r7, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	2020      	movs	r0, #32
 8002eae:	47a0      	blx	r4
          while (l++ < width) {
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002eb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d8f1      	bhi.n	8002ea0 <_vsnprintf+0x67c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002ebc:	e00a      	b.n	8002ed4 <_vsnprintf+0x6b0>
          out(*(p++), buffer, idx++, maxlen);
 8002ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ec4:	7818      	ldrb	r0, [r3, #0]
 8002ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ec8:	1c53      	adds	r3, r2, #1
 8002eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ecc:	68fc      	ldr	r4, [r7, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <_vsnprintf+0x6cc>
 8002edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0eb      	beq.n	8002ebe <_vsnprintf+0x69a>
 8002ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ee8:	1e5a      	subs	r2, r3, #1
 8002eea:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e6      	bne.n	8002ebe <_vsnprintf+0x69a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8002ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00e      	beq.n	8002f18 <_vsnprintf+0x6f4>
          while (l++ < width) {
 8002efa:	e007      	b.n	8002f0c <_vsnprintf+0x6e8>
            out(' ', buffer, idx++, maxlen);
 8002efc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002efe:	1c53      	adds	r3, r2, #1
 8002f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f02:	68fc      	ldr	r4, [r7, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	2020      	movs	r0, #32
 8002f0a:	47a0      	blx	r4
          while (l++ < width) {
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d8f1      	bhi.n	8002efc <_vsnprintf+0x6d8>
          }
        }
        format++;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	603b      	str	r3, [r7, #0]
        break;
 8002f1e:	e039      	b.n	8002f94 <_vsnprintf+0x770>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8002f20:	2308      	movs	r3, #8
 8002f22:	643b      	str	r3, [r7, #64]	@ 0x40
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8002f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f26:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8002f2a:	647b      	str	r3, [r7, #68]	@ 0x44
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8002f2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f2e:	1d1a      	adds	r2, r3, #4
 8002f30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f38:	9305      	str	r3, [sp, #20]
 8002f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f3c:	9304      	str	r3, [sp, #16]
 8002f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f40:	9303      	str	r3, [sp, #12]
 8002f42:	2310      	movs	r3, #16
 8002f44:	9302      	str	r3, [sp, #8]
 8002f46:	2300      	movs	r3, #0
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	9200      	str	r2, [sp, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff f9b7 	bl	80022c6 <_ntoa_long>
 8002f58:	6378      	str	r0, [r7, #52]	@ 0x34
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	603b      	str	r3, [r7, #0]
        break;
 8002f60:	e018      	b.n	8002f94 <_vsnprintf+0x770>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8002f62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f64:	1c53      	adds	r3, r2, #1
 8002f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f68:	68fc      	ldr	r4, [r7, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	2025      	movs	r0, #37	@ 0x25
 8002f70:	47a0      	blx	r4
        format++;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	603b      	str	r3, [r7, #0]
        break;
 8002f78:	e00c      	b.n	8002f94 <_vsnprintf+0x770>

      default :
        out(*format, buffer, idx++, maxlen);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	7818      	ldrb	r0, [r3, #0]
 8002f7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f80:	1c53      	adds	r3, r2, #1
 8002f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f84:	68fc      	ldr	r4, [r7, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	47a0      	blx	r4
        format++;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	603b      	str	r3, [r7, #0]
        break;
 8002f92:	bf00      	nop
  while (*format)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f47f ac53 	bne.w	8002844 <_vsnprintf+0x20>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002f9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d302      	bcc.n	8002fac <_vsnprintf+0x788>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	1e5a      	subs	r2, r3, #1
 8002faa:	e000      	b.n	8002fae <_vsnprintf+0x78a>
 8002fac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fae:	68fc      	ldr	r4, [r7, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	374c      	adds	r7, #76	@ 0x4c
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd90      	pop	{r4, r7, pc}
 8002fc2:	bf00      	nop

08002fc4 <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 8002fc4:	b40c      	push	{r2, r3}
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af02      	add	r7, sp, #8
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 8002fd0:	f107 031c 	add.w	r3, r7, #28
 8002fd4:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4805      	ldr	r0, [pc, #20]	@ (8002ff8 <snprintf_+0x34>)
 8002fe2:	f7ff fc1f 	bl	8002824 <_vsnprintf>
 8002fe6:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ff4:	b002      	add	sp, #8
 8002ff6:	4770      	bx	lr
 8002ff8:	08001f75 	.word	0x08001f75

08002ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	607b      	str	r3, [r7, #4]
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <HAL_MspInit+0x4c>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	4a0f      	ldr	r2, [pc, #60]	@ (8003048 <HAL_MspInit+0x4c>)
 800300c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003010:	6453      	str	r3, [r2, #68]	@ 0x44
 8003012:	4b0d      	ldr	r3, [pc, #52]	@ (8003048 <HAL_MspInit+0x4c>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	4b09      	ldr	r3, [pc, #36]	@ (8003048 <HAL_MspInit+0x4c>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	4a08      	ldr	r2, [pc, #32]	@ (8003048 <HAL_MspInit+0x4c>)
 8003028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800302c:	6413      	str	r3, [r2, #64]	@ 0x40
 800302e:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_MspInit+0x4c>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800303a:	2007      	movs	r0, #7
 800303c:	f000 fa26 	bl	800348c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	@ 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	f107 0314 	add.w	r3, r7, #20
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a19      	ldr	r2, [pc, #100]	@ (80030d0 <HAL_I2C_MspInit+0x84>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d12c      	bne.n	80030c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	4b18      	ldr	r3, [pc, #96]	@ (80030d4 <HAL_I2C_MspInit+0x88>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	4a17      	ldr	r2, [pc, #92]	@ (80030d4 <HAL_I2C_MspInit+0x88>)
 8003078:	f043 0302 	orr.w	r3, r3, #2
 800307c:	6313      	str	r3, [r2, #48]	@ 0x30
 800307e:	4b15      	ldr	r3, [pc, #84]	@ (80030d4 <HAL_I2C_MspInit+0x88>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800308a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800308e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003090:	2312      	movs	r3, #18
 8003092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003094:	2301      	movs	r3, #1
 8003096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003098:	2302      	movs	r3, #2
 800309a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800309c:	2304      	movs	r3, #4
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	4619      	mov	r1, r3
 80030a6:	480c      	ldr	r0, [pc, #48]	@ (80030d8 <HAL_I2C_MspInit+0x8c>)
 80030a8:	f000 fa24 	bl	80034f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	4b08      	ldr	r3, [pc, #32]	@ (80030d4 <HAL_I2C_MspInit+0x88>)
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	4a07      	ldr	r2, [pc, #28]	@ (80030d4 <HAL_I2C_MspInit+0x88>)
 80030b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80030bc:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <HAL_I2C_MspInit+0x88>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80030c8:	bf00      	nop
 80030ca:	3728      	adds	r7, #40	@ 0x28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40005400 	.word	0x40005400
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40020400 	.word	0x40020400

080030dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	@ 0x28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	@ (8003160 <HAL_UART_MspInit+0x84>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d12b      	bne.n	8003156 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	4b18      	ldr	r3, [pc, #96]	@ (8003164 <HAL_UART_MspInit+0x88>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	4a17      	ldr	r2, [pc, #92]	@ (8003164 <HAL_UART_MspInit+0x88>)
 8003108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800310c:	6413      	str	r3, [r2, #64]	@ 0x40
 800310e:	4b15      	ldr	r3, [pc, #84]	@ (8003164 <HAL_UART_MspInit+0x88>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <HAL_UART_MspInit+0x88>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	4a10      	ldr	r2, [pc, #64]	@ (8003164 <HAL_UART_MspInit+0x88>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6313      	str	r3, [r2, #48]	@ 0x30
 800312a:	4b0e      	ldr	r3, [pc, #56]	@ (8003164 <HAL_UART_MspInit+0x88>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003136:	230c      	movs	r3, #12
 8003138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003146:	2307      	movs	r3, #7
 8003148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	4619      	mov	r1, r3
 8003150:	4805      	ldr	r0, [pc, #20]	@ (8003168 <HAL_UART_MspInit+0x8c>)
 8003152:	f000 f9cf 	bl	80034f4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003156:	bf00      	nop
 8003158:	3728      	adds	r7, #40	@ 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40004400 	.word	0x40004400
 8003164:	40023800 	.word	0x40023800
 8003168:	40020000 	.word	0x40020000

0800316c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003170:	bf00      	nop
 8003172:	e7fd      	b.n	8003170 <NMI_Handler+0x4>

08003174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003178:	bf00      	nop
 800317a:	e7fd      	b.n	8003178 <HardFault_Handler+0x4>

0800317c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003180:	bf00      	nop
 8003182:	e7fd      	b.n	8003180 <MemManage_Handler+0x4>

08003184 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003188:	bf00      	nop
 800318a:	e7fd      	b.n	8003188 <BusFault_Handler+0x4>

0800318c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <UsageFault_Handler+0x4>

08003194 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031c2:	f000 f891 	bl	80032e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031d0:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <SystemInit+0x20>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d6:	4a05      	ldr	r2, [pc, #20]	@ (80031ec <SystemInit+0x20>)
 80031d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003228 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80031f4:	f7ff ffea 	bl	80031cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031f8:	480c      	ldr	r0, [pc, #48]	@ (800322c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031fa:	490d      	ldr	r1, [pc, #52]	@ (8003230 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003234 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003200:	e002      	b.n	8003208 <LoopCopyDataInit>

08003202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003206:	3304      	adds	r3, #4

08003208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800320a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800320c:	d3f9      	bcc.n	8003202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800320e:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003210:	4c0a      	ldr	r4, [pc, #40]	@ (800323c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003214:	e001      	b.n	800321a <LoopFillZerobss>

08003216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003218:	3204      	adds	r2, #4

0800321a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800321a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800321c:	d3fb      	bcc.n	8003216 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800321e:	f002 fcfb 	bl	8005c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003222:	f7fe fc7d 	bl	8001b20 <main>
  bx  lr    
 8003226:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003228:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800322c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003230:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003234:	08005d18 	.word	0x08005d18
  ldr r2, =_sbss
 8003238:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800323c:	20000598 	.word	0x20000598

08003240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003240:	e7fe      	b.n	8003240 <ADC_IRQHandler>
	...

08003244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003248:	4b0e      	ldr	r3, [pc, #56]	@ (8003284 <HAL_Init+0x40>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a0d      	ldr	r2, [pc, #52]	@ (8003284 <HAL_Init+0x40>)
 800324e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003254:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <HAL_Init+0x40>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a0a      	ldr	r2, [pc, #40]	@ (8003284 <HAL_Init+0x40>)
 800325a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800325e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003260:	4b08      	ldr	r3, [pc, #32]	@ (8003284 <HAL_Init+0x40>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a07      	ldr	r2, [pc, #28]	@ (8003284 <HAL_Init+0x40>)
 8003266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800326c:	2003      	movs	r0, #3
 800326e:	f000 f90d 	bl	800348c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003272:	2000      	movs	r0, #0
 8003274:	f000 f808 	bl	8003288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003278:	f7ff fec0 	bl	8002ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023c00 	.word	0x40023c00

08003288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003290:	4b12      	ldr	r3, [pc, #72]	@ (80032dc <HAL_InitTick+0x54>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4b12      	ldr	r3, [pc, #72]	@ (80032e0 <HAL_InitTick+0x58>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	4619      	mov	r1, r3
 800329a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800329e:	fbb3 f3f1 	udiv	r3, r3, r1
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f917 	bl	80034da <HAL_SYSTICK_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00e      	b.n	80032d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b0f      	cmp	r3, #15
 80032ba:	d80a      	bhi.n	80032d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032bc:	2200      	movs	r2, #0
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	f000 f8ed 	bl	80034a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032c8:	4a06      	ldr	r2, [pc, #24]	@ (80032e4 <HAL_InitTick+0x5c>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000008 	.word	0x20000008
 80032e0:	20000010 	.word	0x20000010
 80032e4:	2000000c 	.word	0x2000000c

080032e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032ec:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <HAL_IncTick+0x20>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	4b06      	ldr	r3, [pc, #24]	@ (800330c <HAL_IncTick+0x24>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4413      	add	r3, r2
 80032f8:	4a04      	ldr	r2, [pc, #16]	@ (800330c <HAL_IncTick+0x24>)
 80032fa:	6013      	str	r3, [r2, #0]
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000010 	.word	0x20000010
 800330c:	2000045c 	.word	0x2000045c

08003310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return uwTick;
 8003314:	4b03      	ldr	r3, [pc, #12]	@ (8003324 <HAL_GetTick+0x14>)
 8003316:	681b      	ldr	r3, [r3, #0]
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	2000045c 	.word	0x2000045c

08003328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003338:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <__NVIC_SetPriorityGrouping+0x44>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003344:	4013      	ands	r3, r2
 8003346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003350:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800335a:	4a04      	ldr	r2, [pc, #16]	@ (800336c <__NVIC_SetPriorityGrouping+0x44>)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	60d3      	str	r3, [r2, #12]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003374:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <__NVIC_GetPriorityGrouping+0x18>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	0a1b      	lsrs	r3, r3, #8
 800337a:	f003 0307 	and.w	r3, r3, #7
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	@ (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	@ (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	@ 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
         );
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	@ 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003458:	d301      	bcc.n	800345e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345a:	2301      	movs	r3, #1
 800345c:	e00f      	b.n	800347e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345e:	4a0a      	ldr	r2, [pc, #40]	@ (8003488 <SysTick_Config+0x40>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003466:	210f      	movs	r1, #15
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	f7ff ff8e 	bl	800338c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <SysTick_Config+0x40>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003476:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <SysTick_Config+0x40>)
 8003478:	2207      	movs	r2, #7
 800347a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	e000e010 	.word	0xe000e010

0800348c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff47 	bl	8003328 <__NVIC_SetPriorityGrouping>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b4:	f7ff ff5c 	bl	8003370 <__NVIC_GetPriorityGrouping>
 80034b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f7ff ff8e 	bl	80033e0 <NVIC_EncodePriority>
 80034c4:	4602      	mov	r2, r0
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff5d 	bl	800338c <__NVIC_SetPriority>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ffb0 	bl	8003448 <SysTick_Config>
 80034e8:	4603      	mov	r3, r0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	@ 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	e159      	b.n	80037c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003510:	2201      	movs	r2, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	429a      	cmp	r2, r3
 800352a:	f040 8148 	bne.w	80037be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d005      	beq.n	8003546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003542:	2b02      	cmp	r3, #2
 8003544:	d130      	bne.n	80035a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	2203      	movs	r2, #3
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4313      	orrs	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800357c:	2201      	movs	r2, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	091b      	lsrs	r3, r3, #4
 8003592:	f003 0201 	and.w	r2, r3, #1
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d017      	beq.n	80035e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	2203      	movs	r2, #3
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d123      	bne.n	8003638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	08da      	lsrs	r2, r3, #3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3208      	adds	r2, #8
 80035f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	220f      	movs	r2, #15
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	08da      	lsrs	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3208      	adds	r2, #8
 8003632:	69b9      	ldr	r1, [r7, #24]
 8003634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	2203      	movs	r2, #3
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0203 	and.w	r2, r3, #3
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80a2 	beq.w	80037be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	4b57      	ldr	r3, [pc, #348]	@ (80037dc <HAL_GPIO_Init+0x2e8>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	4a56      	ldr	r2, [pc, #344]	@ (80037dc <HAL_GPIO_Init+0x2e8>)
 8003684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003688:	6453      	str	r3, [r2, #68]	@ 0x44
 800368a:	4b54      	ldr	r3, [pc, #336]	@ (80037dc <HAL_GPIO_Init+0x2e8>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003696:	4a52      	ldr	r2, [pc, #328]	@ (80037e0 <HAL_GPIO_Init+0x2ec>)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	3302      	adds	r3, #2
 800369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	220f      	movs	r2, #15
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a49      	ldr	r2, [pc, #292]	@ (80037e4 <HAL_GPIO_Init+0x2f0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d019      	beq.n	80036f6 <HAL_GPIO_Init+0x202>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a48      	ldr	r2, [pc, #288]	@ (80037e8 <HAL_GPIO_Init+0x2f4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d013      	beq.n	80036f2 <HAL_GPIO_Init+0x1fe>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a47      	ldr	r2, [pc, #284]	@ (80037ec <HAL_GPIO_Init+0x2f8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00d      	beq.n	80036ee <HAL_GPIO_Init+0x1fa>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a46      	ldr	r2, [pc, #280]	@ (80037f0 <HAL_GPIO_Init+0x2fc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <HAL_GPIO_Init+0x1f6>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a45      	ldr	r2, [pc, #276]	@ (80037f4 <HAL_GPIO_Init+0x300>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_GPIO_Init+0x1f2>
 80036e2:	2304      	movs	r3, #4
 80036e4:	e008      	b.n	80036f8 <HAL_GPIO_Init+0x204>
 80036e6:	2307      	movs	r3, #7
 80036e8:	e006      	b.n	80036f8 <HAL_GPIO_Init+0x204>
 80036ea:	2303      	movs	r3, #3
 80036ec:	e004      	b.n	80036f8 <HAL_GPIO_Init+0x204>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e002      	b.n	80036f8 <HAL_GPIO_Init+0x204>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_GPIO_Init+0x204>
 80036f6:	2300      	movs	r3, #0
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	f002 0203 	and.w	r2, r2, #3
 80036fe:	0092      	lsls	r2, r2, #2
 8003700:	4093      	lsls	r3, r2
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4313      	orrs	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003708:	4935      	ldr	r1, [pc, #212]	@ (80037e0 <HAL_GPIO_Init+0x2ec>)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	089b      	lsrs	r3, r3, #2
 800370e:	3302      	adds	r3, #2
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003716:	4b38      	ldr	r3, [pc, #224]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800373a:	4a2f      	ldr	r2, [pc, #188]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003740:	4b2d      	ldr	r3, [pc, #180]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003764:	4a24      	ldr	r2, [pc, #144]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800376a:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800378e:	4a1a      	ldr	r2, [pc, #104]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003794:	4b18      	ldr	r3, [pc, #96]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037b8:	4a0f      	ldr	r2, [pc, #60]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3301      	adds	r3, #1
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b0f      	cmp	r3, #15
 80037c8:	f67f aea2 	bls.w	8003510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	3724      	adds	r7, #36	@ 0x24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40013800 	.word	0x40013800
 80037e4:	40020000 	.word	0x40020000
 80037e8:	40020400 	.word	0x40020400
 80037ec:	40020800 	.word	0x40020800
 80037f0:	40020c00 	.word	0x40020c00
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40013c00 	.word	0x40013c00

080037fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	887b      	ldrh	r3, [r7, #2]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
 8003818:	e001      	b.n	800381e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800381e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]
 8003838:	4613      	mov	r3, r2
 800383a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800383c:	787b      	ldrb	r3, [r7, #1]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003848:	e003      	b.n	8003852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800384a:	887b      	ldrh	r3, [r7, #2]
 800384c:	041a      	lsls	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	619a      	str	r2, [r3, #24]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e12b      	b.n	8003aca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff fbe0 	bl	800304c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	@ 0x24
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c4:	f001 fc60 	bl	8005188 <HAL_RCC_GetPCLK1Freq>
 80038c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4a81      	ldr	r2, [pc, #516]	@ (8003ad4 <HAL_I2C_Init+0x274>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d807      	bhi.n	80038e4 <HAL_I2C_Init+0x84>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a80      	ldr	r2, [pc, #512]	@ (8003ad8 <HAL_I2C_Init+0x278>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	bf94      	ite	ls
 80038dc:	2301      	movls	r3, #1
 80038de:	2300      	movhi	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e006      	b.n	80038f2 <HAL_I2C_Init+0x92>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4a7d      	ldr	r2, [pc, #500]	@ (8003adc <HAL_I2C_Init+0x27c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	bf94      	ite	ls
 80038ec:	2301      	movls	r3, #1
 80038ee:	2300      	movhi	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e0e7      	b.n	8003aca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a78      	ldr	r2, [pc, #480]	@ (8003ae0 <HAL_I2C_Init+0x280>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	0c9b      	lsrs	r3, r3, #18
 8003904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a6a      	ldr	r2, [pc, #424]	@ (8003ad4 <HAL_I2C_Init+0x274>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d802      	bhi.n	8003934 <HAL_I2C_Init+0xd4>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3301      	adds	r3, #1
 8003932:	e009      	b.n	8003948 <HAL_I2C_Init+0xe8>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	4a69      	ldr	r2, [pc, #420]	@ (8003ae4 <HAL_I2C_Init+0x284>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	099b      	lsrs	r3, r3, #6
 8003946:	3301      	adds	r3, #1
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	430b      	orrs	r3, r1
 800394e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800395a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	495c      	ldr	r1, [pc, #368]	@ (8003ad4 <HAL_I2C_Init+0x274>)
 8003964:	428b      	cmp	r3, r1
 8003966:	d819      	bhi.n	800399c <HAL_I2C_Init+0x13c>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1e59      	subs	r1, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	fbb1 f3f3 	udiv	r3, r1, r3
 8003976:	1c59      	adds	r1, r3, #1
 8003978:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800397c:	400b      	ands	r3, r1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_I2C_Init+0x138>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1e59      	subs	r1, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003990:	3301      	adds	r3, #1
 8003992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003996:	e051      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 8003998:	2304      	movs	r3, #4
 800399a:	e04f      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d111      	bne.n	80039c8 <HAL_I2C_Init+0x168>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1e58      	subs	r0, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	440b      	add	r3, r1
 80039b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e012      	b.n	80039ee <HAL_I2C_Init+0x18e>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1e58      	subs	r0, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	0099      	lsls	r1, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	fbb0 f3f3 	udiv	r3, r0, r3
 80039de:	3301      	adds	r3, #1
 80039e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Init+0x196>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e022      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10e      	bne.n	8003a1c <HAL_I2C_Init+0x1bc>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1e58      	subs	r0, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	440b      	add	r3, r1
 8003a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a1a:	e00f      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e58      	subs	r0, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	0099      	lsls	r1, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	6809      	ldr	r1, [r1, #0]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6911      	ldr	r1, [r2, #16]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68d2      	ldr	r2, [r2, #12]
 8003a76:	4311      	orrs	r1, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	000186a0 	.word	0x000186a0
 8003ad8:	001e847f 	.word	0x001e847f
 8003adc:	003d08ff 	.word	0x003d08ff
 8003ae0:	431bde83 	.word	0x431bde83
 8003ae4:	10624dd3 	.word	0x10624dd3

08003ae8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	4608      	mov	r0, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	461a      	mov	r2, r3
 8003af6:	4603      	mov	r3, r0
 8003af8:	817b      	strh	r3, [r7, #10]
 8003afa:	460b      	mov	r3, r1
 8003afc:	813b      	strh	r3, [r7, #8]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b02:	f7ff fc05 	bl	8003310 <HAL_GetTick>
 8003b06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	f040 80d9 	bne.w	8003cc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	2319      	movs	r3, #25
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	496d      	ldr	r1, [pc, #436]	@ (8003cd4 <HAL_I2C_Mem_Write+0x1ec>)
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fc8b 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e0cc      	b.n	8003cca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_Mem_Write+0x56>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e0c5      	b.n	8003cca <HAL_I2C_Mem_Write+0x1e2>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d007      	beq.n	8003b64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2221      	movs	r2, #33	@ 0x21
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2240      	movs	r2, #64	@ 0x40
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a3a      	ldr	r2, [r7, #32]
 8003b8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a4d      	ldr	r2, [pc, #308]	@ (8003cd8 <HAL_I2C_Mem_Write+0x1f0>)
 8003ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ba6:	88f8      	ldrh	r0, [r7, #6]
 8003ba8:	893a      	ldrh	r2, [r7, #8]
 8003baa:	8979      	ldrh	r1, [r7, #10]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fac2 	bl	8004140 <I2C_RequestMemoryWrite>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d052      	beq.n	8003c68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e081      	b.n	8003cca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fd50 	bl	8004670 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d107      	bne.n	8003bee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e06b      	b.n	8003cca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d11b      	bne.n	8003c68 <HAL_I2C_Mem_Write+0x180>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d017      	beq.n	8003c68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1aa      	bne.n	8003bc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fd43 	bl	8004700 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d107      	bne.n	8003c98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e016      	b.n	8003cca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e000      	b.n	8003cca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	00100002 	.word	0x00100002
 8003cd8:	ffff0000 	.word	0xffff0000

08003cdc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	@ 0x30
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	817b      	strh	r3, [r7, #10]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	813b      	strh	r3, [r7, #8]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cf6:	f7ff fb0b 	bl	8003310 <HAL_GetTick>
 8003cfa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	f040 8214 	bne.w	8004132 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	2319      	movs	r3, #25
 8003d10:	2201      	movs	r2, #1
 8003d12:	497b      	ldr	r1, [pc, #492]	@ (8003f00 <HAL_I2C_Mem_Read+0x224>)
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fb91 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
 8003d22:	e207      	b.n	8004134 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_I2C_Mem_Read+0x56>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e200      	b.n	8004134 <HAL_I2C_Mem_Read+0x458>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d007      	beq.n	8003d58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2222      	movs	r2, #34	@ 0x22
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2240      	movs	r2, #64	@ 0x40
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a5b      	ldr	r2, [pc, #364]	@ (8003f04 <HAL_I2C_Mem_Read+0x228>)
 8003d98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d9a:	88f8      	ldrh	r0, [r7, #6]
 8003d9c:	893a      	ldrh	r2, [r7, #8]
 8003d9e:	8979      	ldrh	r1, [r7, #10]
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	4603      	mov	r3, r0
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fa5e 	bl	800426c <I2C_RequestMemoryRead>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e1bc      	b.n	8004134 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d113      	bne.n	8003dea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	623b      	str	r3, [r7, #32]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	623b      	str	r3, [r7, #32]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	623b      	str	r3, [r7, #32]
 8003dd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e190      	b.n	800410c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d11b      	bne.n	8003e2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e170      	b.n	800410c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d11b      	bne.n	8003e6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	e150      	b.n	800410c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e80:	e144      	b.n	800410c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	f200 80f1 	bhi.w	800406e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d123      	bne.n	8003edc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fc79 	bl	8004790 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e145      	b.n	8004134 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003eda:	e117      	b.n	800410c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d14e      	bne.n	8003f82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eea:	2200      	movs	r2, #0
 8003eec:	4906      	ldr	r1, [pc, #24]	@ (8003f08 <HAL_I2C_Mem_Read+0x22c>)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 faa4 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e11a      	b.n	8004134 <HAL_I2C_Mem_Read+0x458>
 8003efe:	bf00      	nop
 8003f00:	00100002 	.word	0x00100002
 8003f04:	ffff0000 	.word	0xffff0000
 8003f08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f80:	e0c4      	b.n	800410c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f88:	2200      	movs	r2, #0
 8003f8a:	496c      	ldr	r1, [pc, #432]	@ (800413c <HAL_I2C_Mem_Read+0x460>)
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa55 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0cb      	b.n	8004134 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003faa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	4955      	ldr	r1, [pc, #340]	@ (800413c <HAL_I2C_Mem_Read+0x460>)
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fa27 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e09d      	b.n	8004134 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800406c:	e04e      	b.n	800410c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800406e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004070:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 fb8c 	bl	8004790 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e058      	b.n	8004134 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d124      	bne.n	800410c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d107      	bne.n	80040da <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040d8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004110:	2b00      	cmp	r3, #0
 8004112:	f47f aeb6 	bne.w	8003e82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004132:	2302      	movs	r3, #2
  }
}
 8004134:	4618      	mov	r0, r3
 8004136:	3728      	adds	r7, #40	@ 0x28
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	00010004 	.word	0x00010004

08004140 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	4608      	mov	r0, r1
 800414a:	4611      	mov	r1, r2
 800414c:	461a      	mov	r2, r3
 800414e:	4603      	mov	r3, r0
 8004150:	817b      	strh	r3, [r7, #10]
 8004152:	460b      	mov	r3, r1
 8004154:	813b      	strh	r3, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004168:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	2200      	movs	r2, #0
 8004172:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f960 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004190:	d103      	bne.n	800419a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004198:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e05f      	b.n	800425e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800419e:	897b      	ldrh	r3, [r7, #10]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	6a3a      	ldr	r2, [r7, #32]
 80041b2:	492d      	ldr	r1, [pc, #180]	@ (8004268 <I2C_RequestMemoryWrite+0x128>)
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f9bb 	bl	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e04c      	b.n	800425e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041dc:	6a39      	ldr	r1, [r7, #32]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fa46 	bl	8004670 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d107      	bne.n	8004202 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004200:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e02b      	b.n	800425e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d105      	bne.n	8004218 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800420c:	893b      	ldrh	r3, [r7, #8]
 800420e:	b2da      	uxtb	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	611a      	str	r2, [r3, #16]
 8004216:	e021      	b.n	800425c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004218:	893b      	ldrh	r3, [r7, #8]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	b29b      	uxth	r3, r3
 800421e:	b2da      	uxtb	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004228:	6a39      	ldr	r1, [r7, #32]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fa20 	bl	8004670 <I2C_WaitOnTXEFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	2b04      	cmp	r3, #4
 800423c:	d107      	bne.n	800424e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800424c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e005      	b.n	800425e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004252:	893b      	ldrh	r3, [r7, #8]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	00010002 	.word	0x00010002

0800426c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	461a      	mov	r2, r3
 800427a:	4603      	mov	r3, r0
 800427c:	817b      	strh	r3, [r7, #10]
 800427e:	460b      	mov	r3, r1
 8004280:	813b      	strh	r3, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004294:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f8c2 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00d      	beq.n	80042da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042cc:	d103      	bne.n	80042d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e0aa      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042da:	897b      	ldrh	r3, [r7, #10]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	6a3a      	ldr	r2, [r7, #32]
 80042ee:	4952      	ldr	r1, [pc, #328]	@ (8004438 <I2C_RequestMemoryRead+0x1cc>)
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f91d 	bl	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e097      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004318:	6a39      	ldr	r1, [r7, #32]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f9a8 	bl	8004670 <I2C_WaitOnTXEFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00d      	beq.n	8004342 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	2b04      	cmp	r3, #4
 800432c:	d107      	bne.n	800433e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800433c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e076      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d105      	bne.n	8004354 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004348:	893b      	ldrh	r3, [r7, #8]
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	611a      	str	r2, [r3, #16]
 8004352:	e021      	b.n	8004398 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004354:	893b      	ldrh	r3, [r7, #8]
 8004356:	0a1b      	lsrs	r3, r3, #8
 8004358:	b29b      	uxth	r3, r3
 800435a:	b2da      	uxtb	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004364:	6a39      	ldr	r1, [r7, #32]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f982 	bl	8004670 <I2C_WaitOnTXEFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	2b04      	cmp	r3, #4
 8004378:	d107      	bne.n	800438a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004388:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e050      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800438e:	893b      	ldrh	r3, [r7, #8]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439a:	6a39      	ldr	r1, [r7, #32]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f967 	bl	8004670 <I2C_WaitOnTXEFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00d      	beq.n	80043c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d107      	bne.n	80043c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e035      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	2200      	movs	r2, #0
 80043dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f82b 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00d      	beq.n	8004408 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043fa:	d103      	bne.n	8004404 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004402:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e013      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004408:	897b      	ldrh	r3, [r7, #10]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	b2da      	uxtb	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	6a3a      	ldr	r2, [r7, #32]
 800441c:	4906      	ldr	r1, [pc, #24]	@ (8004438 <I2C_RequestMemoryRead+0x1cc>)
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f886 	bl	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	00010002 	.word	0x00010002

0800443c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800444c:	e048      	b.n	80044e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d044      	beq.n	80044e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004456:	f7fe ff5b 	bl	8003310 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d302      	bcc.n	800446c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d139      	bne.n	80044e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	0c1b      	lsrs	r3, r3, #16
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d10d      	bne.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	43da      	mvns	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4013      	ands	r3, r2
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	e00c      	b.n	80044ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	43da      	mvns	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d116      	bne.n	80044e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044cc:	f043 0220 	orr.w	r2, r3, #32
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e023      	b.n	8004528 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	0c1b      	lsrs	r3, r3, #16
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d10d      	bne.n	8004506 <I2C_WaitOnFlagUntilTimeout+0xca>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	43da      	mvns	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	4013      	ands	r3, r2
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf0c      	ite	eq
 80044fc:	2301      	moveq	r3, #1
 80044fe:	2300      	movne	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	e00c      	b.n	8004520 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	43da      	mvns	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4013      	ands	r3, r2
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	bf0c      	ite	eq
 8004518:	2301      	moveq	r3, #1
 800451a:	2300      	movne	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	429a      	cmp	r2, r3
 8004524:	d093      	beq.n	800444e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800453e:	e071      	b.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800454a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800454e:	d123      	bne.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800455e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004568:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004584:	f043 0204 	orr.w	r2, r3, #4
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e067      	b.n	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459e:	d041      	beq.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a0:	f7fe feb6 	bl	8003310 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d302      	bcc.n	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d136      	bne.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d10c      	bne.n	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	43da      	mvns	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4013      	ands	r3, r2
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bf14      	ite	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	2300      	moveq	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	e00b      	b.n	80045f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	43da      	mvns	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4013      	ands	r3, r2
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d016      	beq.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e021      	b.n	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	d10c      	bne.n	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	43da      	mvns	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	4013      	ands	r3, r2
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e00b      	b.n	8004660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	43da      	mvns	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4013      	ands	r3, r2
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	bf14      	ite	ne
 800465a:	2301      	movne	r3, #1
 800465c:	2300      	moveq	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	f47f af6d 	bne.w	8004540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800467c:	e034      	b.n	80046e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f8e3 	bl	800484a <I2C_IsAcknowledgeFailed>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e034      	b.n	80046f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d028      	beq.n	80046e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004696:	f7fe fe3b 	bl	8003310 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d302      	bcc.n	80046ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d11d      	bne.n	80046e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b6:	2b80      	cmp	r3, #128	@ 0x80
 80046b8:	d016      	beq.n	80046e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e007      	b.n	80046f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f2:	2b80      	cmp	r3, #128	@ 0x80
 80046f4:	d1c3      	bne.n	800467e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800470c:	e034      	b.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f89b 	bl	800484a <I2C_IsAcknowledgeFailed>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e034      	b.n	8004788 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d028      	beq.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004726:	f7fe fdf3 	bl	8003310 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	429a      	cmp	r2, r3
 8004734:	d302      	bcc.n	800473c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d11d      	bne.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b04      	cmp	r3, #4
 8004748:	d016      	beq.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e007      	b.n	8004788 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b04      	cmp	r3, #4
 8004784:	d1c3      	bne.n	800470e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800479c:	e049      	b.n	8004832 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d119      	bne.n	80047e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0210 	mvn.w	r2, #16
 80047b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e030      	b.n	8004842 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e0:	f7fe fd96 	bl	8003310 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d302      	bcc.n	80047f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11d      	bne.n	8004832 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004800:	2b40      	cmp	r3, #64	@ 0x40
 8004802:	d016      	beq.n	8004832 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	f043 0220 	orr.w	r2, r3, #32
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e007      	b.n	8004842 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483c:	2b40      	cmp	r3, #64	@ 0x40
 800483e:	d1ae      	bne.n	800479e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004860:	d11b      	bne.n	800489a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800486a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	f043 0204 	orr.w	r2, r3, #4
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e267      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d075      	beq.n	80049b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048c6:	4b88      	ldr	r3, [pc, #544]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d00c      	beq.n	80048ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d2:	4b85      	ldr	r3, [pc, #532]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d112      	bne.n	8004904 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048de:	4b82      	ldr	r3, [pc, #520]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048ea:	d10b      	bne.n	8004904 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	4b7e      	ldr	r3, [pc, #504]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d05b      	beq.n	80049b0 <HAL_RCC_OscConfig+0x108>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d157      	bne.n	80049b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e242      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490c:	d106      	bne.n	800491c <HAL_RCC_OscConfig+0x74>
 800490e:	4b76      	ldr	r3, [pc, #472]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a75      	ldr	r2, [pc, #468]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	e01d      	b.n	8004958 <HAL_RCC_OscConfig+0xb0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004924:	d10c      	bne.n	8004940 <HAL_RCC_OscConfig+0x98>
 8004926:	4b70      	ldr	r3, [pc, #448]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6f      	ldr	r2, [pc, #444]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 800492c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	4b6d      	ldr	r3, [pc, #436]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6c      	ldr	r2, [pc, #432]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e00b      	b.n	8004958 <HAL_RCC_OscConfig+0xb0>
 8004940:	4b69      	ldr	r3, [pc, #420]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a68      	ldr	r2, [pc, #416]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4b66      	ldr	r3, [pc, #408]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a65      	ldr	r2, [pc, #404]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d013      	beq.n	8004988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004960:	f7fe fcd6 	bl	8003310 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004968:	f7fe fcd2 	bl	8003310 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	@ 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e207      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0xc0>
 8004986:	e014      	b.n	80049b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fe fcc2 	bl	8003310 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004990:	f7fe fcbe 	bl	8003310 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	@ 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e1f3      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a2:	4b51      	ldr	r3, [pc, #324]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0xe8>
 80049ae:	e000      	b.n	80049b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d063      	beq.n	8004a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049be:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ca:	4b47      	ldr	r3, [pc, #284]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d11c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d6:	4b44      	ldr	r3, [pc, #272]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d116      	bne.n	8004a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e2:	4b41      	ldr	r3, [pc, #260]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <HAL_RCC_OscConfig+0x152>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d001      	beq.n	80049fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e1c7      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fa:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	4937      	ldr	r1, [pc, #220]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0e:	e03a      	b.n	8004a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d020      	beq.n	8004a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a18:	4b34      	ldr	r3, [pc, #208]	@ (8004aec <HAL_RCC_OscConfig+0x244>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7fe fc77 	bl	8003310 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a26:	f7fe fc73 	bl	8003310 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e1a8      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a38:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a44:	4b28      	ldr	r3, [pc, #160]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	4925      	ldr	r1, [pc, #148]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	600b      	str	r3, [r1, #0]
 8004a58:	e015      	b.n	8004a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5a:	4b24      	ldr	r3, [pc, #144]	@ (8004aec <HAL_RCC_OscConfig+0x244>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fe fc56 	bl	8003310 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a68:	f7fe fc52 	bl	8003310 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e187      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d036      	beq.n	8004b00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9a:	4b15      	ldr	r3, [pc, #84]	@ (8004af0 <HAL_RCC_OscConfig+0x248>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa0:	f7fe fc36 	bl	8003310 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa8:	f7fe fc32 	bl	8003310 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e167      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x200>
 8004ac6:	e01b      	b.n	8004b00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac8:	4b09      	ldr	r3, [pc, #36]	@ (8004af0 <HAL_RCC_OscConfig+0x248>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ace:	f7fe fc1f 	bl	8003310 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad4:	e00e      	b.n	8004af4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad6:	f7fe fc1b 	bl	8003310 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d907      	bls.n	8004af4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e150      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	42470000 	.word	0x42470000
 8004af0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af4:	4b88      	ldr	r3, [pc, #544]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ea      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8097 	beq.w	8004c3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b12:	4b81      	ldr	r3, [pc, #516]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10f      	bne.n	8004b3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	4b7d      	ldr	r3, [pc, #500]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	4a7c      	ldr	r2, [pc, #496]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b2e:	4b7a      	ldr	r3, [pc, #488]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3e:	4b77      	ldr	r3, [pc, #476]	@ (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d118      	bne.n	8004b7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b4a:	4b74      	ldr	r3, [pc, #464]	@ (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a73      	ldr	r2, [pc, #460]	@ (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b56:	f7fe fbdb 	bl	8003310 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5e:	f7fe fbd7 	bl	8003310 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e10c      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b70:	4b6a      	ldr	r3, [pc, #424]	@ (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d106      	bne.n	8004b92 <HAL_RCC_OscConfig+0x2ea>
 8004b84:	4b64      	ldr	r3, [pc, #400]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b88:	4a63      	ldr	r2, [pc, #396]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b90:	e01c      	b.n	8004bcc <HAL_RCC_OscConfig+0x324>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x30c>
 8004b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9e:	4a5e      	ldr	r2, [pc, #376]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	f043 0304 	orr.w	r3, r3, #4
 8004ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba6:	4b5c      	ldr	r3, [pc, #368]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	4a5b      	ldr	r2, [pc, #364]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCC_OscConfig+0x324>
 8004bb4:	4b58      	ldr	r3, [pc, #352]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb8:	4a57      	ldr	r2, [pc, #348]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc0:	4b55      	ldr	r3, [pc, #340]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc4:	4a54      	ldr	r2, [pc, #336]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bc6:	f023 0304 	bic.w	r3, r3, #4
 8004bca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d015      	beq.n	8004c00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fe fb9c 	bl	8003310 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fe fb98 	bl	8003310 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e0cb      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf2:	4b49      	ldr	r3, [pc, #292]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0ee      	beq.n	8004bdc <HAL_RCC_OscConfig+0x334>
 8004bfe:	e014      	b.n	8004c2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c00:	f7fe fb86 	bl	8003310 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c08:	f7fe fb82 	bl	8003310 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e0b5      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1ee      	bne.n	8004c08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d105      	bne.n	8004c3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c30:	4b39      	ldr	r3, [pc, #228]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c34:	4a38      	ldr	r2, [pc, #224]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 80a1 	beq.w	8004d88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c46:	4b34      	ldr	r3, [pc, #208]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d05c      	beq.n	8004d0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d141      	bne.n	8004cde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5a:	4b31      	ldr	r3, [pc, #196]	@ (8004d20 <HAL_RCC_OscConfig+0x478>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c60:	f7fe fb56 	bl	8003310 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fe fb52 	bl	8003310 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e087      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	4b27      	ldr	r3, [pc, #156]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69da      	ldr	r2, [r3, #28]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	019b      	lsls	r3, r3, #6
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	041b      	lsls	r3, r3, #16
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	491b      	ldr	r1, [pc, #108]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d20 <HAL_RCC_OscConfig+0x478>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb6:	f7fe fb2b 	bl	8003310 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fe fb27 	bl	8003310 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e05c      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd0:	4b11      	ldr	r3, [pc, #68]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0f0      	beq.n	8004cbe <HAL_RCC_OscConfig+0x416>
 8004cdc:	e054      	b.n	8004d88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cde:	4b10      	ldr	r3, [pc, #64]	@ (8004d20 <HAL_RCC_OscConfig+0x478>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fe fb14 	bl	8003310 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fe fb10 	bl	8003310 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e045      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfe:	4b06      	ldr	r3, [pc, #24]	@ (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x444>
 8004d0a:	e03d      	b.n	8004d88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d107      	bne.n	8004d24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e038      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d24:	4b1b      	ldr	r3, [pc, #108]	@ (8004d94 <HAL_RCC_OscConfig+0x4ec>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d028      	beq.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d121      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d11a      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d54:	4013      	ands	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d111      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d107      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40023800 	.word	0x40023800

08004d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0cc      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dac:	4b68      	ldr	r3, [pc, #416]	@ (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d90c      	bls.n	8004dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dba:	4b65      	ldr	r3, [pc, #404]	@ (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	4b63      	ldr	r3, [pc, #396]	@ (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0b8      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d020      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dec:	4b59      	ldr	r3, [pc, #356]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a58      	ldr	r2, [pc, #352]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004df6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e04:	4b53      	ldr	r3, [pc, #332]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4a52      	ldr	r2, [pc, #328]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e10:	4b50      	ldr	r3, [pc, #320]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	494d      	ldr	r1, [pc, #308]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d044      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d107      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e36:	4b47      	ldr	r3, [pc, #284]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d119      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e07f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d003      	beq.n	8004e56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d107      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e56:	4b3f      	ldr	r3, [pc, #252]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e06f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e66:	4b3b      	ldr	r3, [pc, #236]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e067      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e76:	4b37      	ldr	r3, [pc, #220]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f023 0203 	bic.w	r2, r3, #3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4934      	ldr	r1, [pc, #208]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e88:	f7fe fa42 	bl	8003310 <HAL_GetTick>
 8004e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8e:	e00a      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e90:	f7fe fa3e 	bl	8003310 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e04f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 020c 	and.w	r2, r3, #12
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d1eb      	bne.n	8004e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b25      	ldr	r3, [pc, #148]	@ (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d20c      	bcs.n	8004ee0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b22      	ldr	r3, [pc, #136]	@ (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b20      	ldr	r3, [pc, #128]	@ (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e032      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eec:	4b19      	ldr	r3, [pc, #100]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4916      	ldr	r1, [pc, #88]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f0a:	4b12      	ldr	r3, [pc, #72]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	490e      	ldr	r1, [pc, #56]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f1e:	f000 f821 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 8004f22:	4602      	mov	r2, r0
 8004f24:	4b0b      	ldr	r3, [pc, #44]	@ (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	091b      	lsrs	r3, r3, #4
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	490a      	ldr	r1, [pc, #40]	@ (8004f58 <HAL_RCC_ClockConfig+0x1c0>)
 8004f30:	5ccb      	ldrb	r3, [r1, r3]
 8004f32:	fa22 f303 	lsr.w	r3, r2, r3
 8004f36:	4a09      	ldr	r2, [pc, #36]	@ (8004f5c <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f3a:	4b09      	ldr	r3, [pc, #36]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fe f9a2 	bl	8003288 <HAL_InitTick>

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40023c00 	.word	0x40023c00
 8004f54:	40023800 	.word	0x40023800
 8004f58:	08005cf0 	.word	0x08005cf0
 8004f5c:	20000008 	.word	0x20000008
 8004f60:	2000000c 	.word	0x2000000c

08004f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f68:	b094      	sub	sp, #80	@ 0x50
 8004f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f7c:	4b79      	ldr	r3, [pc, #484]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d00d      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	f200 80e1 	bhi.w	8005150 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x34>
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d003      	beq.n	8004f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f96:	e0db      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f98:	4b73      	ldr	r3, [pc, #460]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f9c:	e0db      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f9e:	4b73      	ldr	r3, [pc, #460]	@ (800516c <HAL_RCC_GetSysClockFreq+0x208>)
 8004fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fa2:	e0d8      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fa4:	4b6f      	ldr	r3, [pc, #444]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fae:	4b6d      	ldr	r3, [pc, #436]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d063      	beq.n	8005082 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fba:	4b6a      	ldr	r3, [pc, #424]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	099b      	lsrs	r3, r3, #6
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fce:	2300      	movs	r3, #0
 8004fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	462b      	mov	r3, r5
 8004fda:	f04f 0000 	mov.w	r0, #0
 8004fde:	f04f 0100 	mov.w	r1, #0
 8004fe2:	0159      	lsls	r1, r3, #5
 8004fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fe8:	0150      	lsls	r0, r2, #5
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4621      	mov	r1, r4
 8004ff0:	1a51      	subs	r1, r2, r1
 8004ff2:	6139      	str	r1, [r7, #16]
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005008:	4659      	mov	r1, fp
 800500a:	018b      	lsls	r3, r1, #6
 800500c:	4651      	mov	r1, sl
 800500e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005012:	4651      	mov	r1, sl
 8005014:	018a      	lsls	r2, r1, #6
 8005016:	4651      	mov	r1, sl
 8005018:	ebb2 0801 	subs.w	r8, r2, r1
 800501c:	4659      	mov	r1, fp
 800501e:	eb63 0901 	sbc.w	r9, r3, r1
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800502e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005036:	4690      	mov	r8, r2
 8005038:	4699      	mov	r9, r3
 800503a:	4623      	mov	r3, r4
 800503c:	eb18 0303 	adds.w	r3, r8, r3
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	462b      	mov	r3, r5
 8005044:	eb49 0303 	adc.w	r3, r9, r3
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005056:	4629      	mov	r1, r5
 8005058:	024b      	lsls	r3, r1, #9
 800505a:	4621      	mov	r1, r4
 800505c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005060:	4621      	mov	r1, r4
 8005062:	024a      	lsls	r2, r1, #9
 8005064:	4610      	mov	r0, r2
 8005066:	4619      	mov	r1, r3
 8005068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800506a:	2200      	movs	r2, #0
 800506c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800506e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005074:	f7fb fdbc 	bl	8000bf0 <__aeabi_uldivmod>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4613      	mov	r3, r2
 800507e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005080:	e058      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005082:	4b38      	ldr	r3, [pc, #224]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	2200      	movs	r2, #0
 800508a:	4618      	mov	r0, r3
 800508c:	4611      	mov	r1, r2
 800508e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005092:	623b      	str	r3, [r7, #32]
 8005094:	2300      	movs	r3, #0
 8005096:	627b      	str	r3, [r7, #36]	@ 0x24
 8005098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	f04f 0000 	mov.w	r0, #0
 80050a4:	f04f 0100 	mov.w	r1, #0
 80050a8:	0159      	lsls	r1, r3, #5
 80050aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ae:	0150      	lsls	r0, r2, #5
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4641      	mov	r1, r8
 80050b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80050ba:	4649      	mov	r1, r9
 80050bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050d4:	ebb2 040a 	subs.w	r4, r2, sl
 80050d8:	eb63 050b 	sbc.w	r5, r3, fp
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	00eb      	lsls	r3, r5, #3
 80050e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ea:	00e2      	lsls	r2, r4, #3
 80050ec:	4614      	mov	r4, r2
 80050ee:	461d      	mov	r5, r3
 80050f0:	4643      	mov	r3, r8
 80050f2:	18e3      	adds	r3, r4, r3
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	464b      	mov	r3, r9
 80050f8:	eb45 0303 	adc.w	r3, r5, r3
 80050fc:	607b      	str	r3, [r7, #4]
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800510a:	4629      	mov	r1, r5
 800510c:	028b      	lsls	r3, r1, #10
 800510e:	4621      	mov	r1, r4
 8005110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005114:	4621      	mov	r1, r4
 8005116:	028a      	lsls	r2, r1, #10
 8005118:	4610      	mov	r0, r2
 800511a:	4619      	mov	r1, r3
 800511c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800511e:	2200      	movs	r2, #0
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	61fa      	str	r2, [r7, #28]
 8005124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005128:	f7fb fd62 	bl	8000bf0 <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4613      	mov	r3, r2
 8005132:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005134:	4b0b      	ldr	r3, [pc, #44]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	3301      	adds	r3, #1
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005144:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800514e:	e002      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005150:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x204>)
 8005152:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005158:	4618      	mov	r0, r3
 800515a:	3750      	adds	r7, #80	@ 0x50
 800515c:	46bd      	mov	sp, r7
 800515e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005162:	bf00      	nop
 8005164:	40023800 	.word	0x40023800
 8005168:	00f42400 	.word	0x00f42400
 800516c:	007a1200 	.word	0x007a1200

08005170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005174:	4b03      	ldr	r3, [pc, #12]	@ (8005184 <HAL_RCC_GetHCLKFreq+0x14>)
 8005176:	681b      	ldr	r3, [r3, #0]
}
 8005178:	4618      	mov	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20000008 	.word	0x20000008

08005188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800518c:	f7ff fff0 	bl	8005170 <HAL_RCC_GetHCLKFreq>
 8005190:	4602      	mov	r2, r0
 8005192:	4b05      	ldr	r3, [pc, #20]	@ (80051a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	0a9b      	lsrs	r3, r3, #10
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	4903      	ldr	r1, [pc, #12]	@ (80051ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800519e:	5ccb      	ldrb	r3, [r1, r3]
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40023800 	.word	0x40023800
 80051ac:	08005d00 	.word	0x08005d00

080051b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051b4:	f7ff ffdc 	bl	8005170 <HAL_RCC_GetHCLKFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	0b5b      	lsrs	r3, r3, #13
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	4903      	ldr	r1, [pc, #12]	@ (80051d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40023800 	.word	0x40023800
 80051d4:	08005d00 	.word	0x08005d00

080051d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e042      	b.n	8005270 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fd ff6c 	bl	80030dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2224      	movs	r2, #36	@ 0x24
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800521a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f973 	bl	8005508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695a      	ldr	r2, [r3, #20]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08a      	sub	sp, #40	@ 0x28
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b20      	cmp	r3, #32
 8005296:	d175      	bne.n	8005384 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_UART_Transmit+0x2c>
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e06e      	b.n	8005386 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2221      	movs	r2, #33	@ 0x21
 80052b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052b6:	f7fe f82b 	bl	8003310 <HAL_GetTick>
 80052ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	88fa      	ldrh	r2, [r7, #6]
 80052c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	88fa      	ldrh	r2, [r7, #6]
 80052c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d0:	d108      	bne.n	80052e4 <HAL_UART_Transmit+0x6c>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d104      	bne.n	80052e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	e003      	b.n	80052ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052ec:	e02e      	b.n	800534c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2200      	movs	r2, #0
 80052f6:	2180      	movs	r1, #128	@ 0x80
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f848 	bl	800538e <UART_WaitOnFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e03a      	b.n	8005386 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10b      	bne.n	800532e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005324:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	3302      	adds	r3, #2
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	e007      	b.n	800533e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	781a      	ldrb	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	3301      	adds	r3, #1
 800533c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005342:	b29b      	uxth	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1cb      	bne.n	80052ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2200      	movs	r2, #0
 800535e:	2140      	movs	r1, #64	@ 0x40
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 f814 	bl	800538e <UART_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e006      	b.n	8005386 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e000      	b.n	8005386 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005384:	2302      	movs	r3, #2
  }
}
 8005386:	4618      	mov	r0, r3
 8005388:	3720      	adds	r7, #32
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b086      	sub	sp, #24
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	603b      	str	r3, [r7, #0]
 800539a:	4613      	mov	r3, r2
 800539c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800539e:	e03b      	b.n	8005418 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	d037      	beq.n	8005418 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a8:	f7fd ffb2 	bl	8003310 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	6a3a      	ldr	r2, [r7, #32]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d302      	bcc.n	80053be <UART_WaitOnFlagUntilTimeout+0x30>
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e03a      	b.n	8005438 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d023      	beq.n	8005418 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b80      	cmp	r3, #128	@ 0x80
 80053d4:	d020      	beq.n	8005418 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b40      	cmp	r3, #64	@ 0x40
 80053da:	d01d      	beq.n	8005418 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d116      	bne.n	8005418 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f81d 	bl	8005440 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2208      	movs	r2, #8
 800540a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e00f      	b.n	8005438 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	429a      	cmp	r2, r3
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	429a      	cmp	r2, r3
 8005434:	d0b4      	beq.n	80053a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b095      	sub	sp, #84	@ 0x54
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	330c      	adds	r3, #12
 800544e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800545e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005468:	643a      	str	r2, [r7, #64]	@ 0x40
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800546e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005470:	e841 2300 	strex	r3, r2, [r1]
 8005474:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e5      	bne.n	8005448 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3314      	adds	r3, #20
 8005482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	61fb      	str	r3, [r7, #28]
   return(result);
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f023 0301 	bic.w	r3, r3, #1
 8005492:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3314      	adds	r3, #20
 800549a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800549c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800549e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e5      	bne.n	800547c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d119      	bne.n	80054ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f023 0310 	bic.w	r3, r3, #16
 80054ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054d8:	61ba      	str	r2, [r7, #24]
 80054da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6979      	ldr	r1, [r7, #20]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	613b      	str	r3, [r7, #16]
   return(result);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e5      	bne.n	80054b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054fa:	bf00      	nop
 80054fc:	3754      	adds	r7, #84	@ 0x54
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800550c:	b0c0      	sub	sp, #256	@ 0x100
 800550e:	af00      	add	r7, sp, #0
 8005510:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005524:	68d9      	ldr	r1, [r3, #12]
 8005526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	ea40 0301 	orr.w	r3, r0, r1
 8005530:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	431a      	orrs	r2, r3
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	431a      	orrs	r2, r3
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005560:	f021 010c 	bic.w	r1, r1, #12
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800556e:	430b      	orrs	r3, r1
 8005570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005582:	6999      	ldr	r1, [r3, #24]
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	ea40 0301 	orr.w	r3, r0, r1
 800558e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b8f      	ldr	r3, [pc, #572]	@ (80057d4 <UART_SetConfig+0x2cc>)
 8005598:	429a      	cmp	r2, r3
 800559a:	d005      	beq.n	80055a8 <UART_SetConfig+0xa0>
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b8d      	ldr	r3, [pc, #564]	@ (80057d8 <UART_SetConfig+0x2d0>)
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d104      	bne.n	80055b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055a8:	f7ff fe02 	bl	80051b0 <HAL_RCC_GetPCLK2Freq>
 80055ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055b0:	e003      	b.n	80055ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055b2:	f7ff fde9 	bl	8005188 <HAL_RCC_GetPCLK1Freq>
 80055b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055c4:	f040 810c 	bne.w	80057e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055da:	4622      	mov	r2, r4
 80055dc:	462b      	mov	r3, r5
 80055de:	1891      	adds	r1, r2, r2
 80055e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055e2:	415b      	adcs	r3, r3
 80055e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055ea:	4621      	mov	r1, r4
 80055ec:	eb12 0801 	adds.w	r8, r2, r1
 80055f0:	4629      	mov	r1, r5
 80055f2:	eb43 0901 	adc.w	r9, r3, r1
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800560a:	4690      	mov	r8, r2
 800560c:	4699      	mov	r9, r3
 800560e:	4623      	mov	r3, r4
 8005610:	eb18 0303 	adds.w	r3, r8, r3
 8005614:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005618:	462b      	mov	r3, r5
 800561a:	eb49 0303 	adc.w	r3, r9, r3
 800561e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800562e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005632:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005636:	460b      	mov	r3, r1
 8005638:	18db      	adds	r3, r3, r3
 800563a:	653b      	str	r3, [r7, #80]	@ 0x50
 800563c:	4613      	mov	r3, r2
 800563e:	eb42 0303 	adc.w	r3, r2, r3
 8005642:	657b      	str	r3, [r7, #84]	@ 0x54
 8005644:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005648:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800564c:	f7fb fad0 	bl	8000bf0 <__aeabi_uldivmod>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4b61      	ldr	r3, [pc, #388]	@ (80057dc <UART_SetConfig+0x2d4>)
 8005656:	fba3 2302 	umull	r2, r3, r3, r2
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	011c      	lsls	r4, r3, #4
 800565e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005662:	2200      	movs	r2, #0
 8005664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005668:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800566c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005670:	4642      	mov	r2, r8
 8005672:	464b      	mov	r3, r9
 8005674:	1891      	adds	r1, r2, r2
 8005676:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005678:	415b      	adcs	r3, r3
 800567a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800567c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005680:	4641      	mov	r1, r8
 8005682:	eb12 0a01 	adds.w	sl, r2, r1
 8005686:	4649      	mov	r1, r9
 8005688:	eb43 0b01 	adc.w	fp, r3, r1
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005698:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800569c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056a0:	4692      	mov	sl, r2
 80056a2:	469b      	mov	fp, r3
 80056a4:	4643      	mov	r3, r8
 80056a6:	eb1a 0303 	adds.w	r3, sl, r3
 80056aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056ae:	464b      	mov	r3, r9
 80056b0:	eb4b 0303 	adc.w	r3, fp, r3
 80056b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056cc:	460b      	mov	r3, r1
 80056ce:	18db      	adds	r3, r3, r3
 80056d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80056d2:	4613      	mov	r3, r2
 80056d4:	eb42 0303 	adc.w	r3, r2, r3
 80056d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80056da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056e2:	f7fb fa85 	bl	8000bf0 <__aeabi_uldivmod>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4611      	mov	r1, r2
 80056ec:	4b3b      	ldr	r3, [pc, #236]	@ (80057dc <UART_SetConfig+0x2d4>)
 80056ee:	fba3 2301 	umull	r2, r3, r3, r1
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	2264      	movs	r2, #100	@ 0x64
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	1acb      	subs	r3, r1, r3
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005702:	4b36      	ldr	r3, [pc, #216]	@ (80057dc <UART_SetConfig+0x2d4>)
 8005704:	fba3 2302 	umull	r2, r3, r3, r2
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005710:	441c      	add	r4, r3
 8005712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005716:	2200      	movs	r2, #0
 8005718:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800571c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005720:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005724:	4642      	mov	r2, r8
 8005726:	464b      	mov	r3, r9
 8005728:	1891      	adds	r1, r2, r2
 800572a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800572c:	415b      	adcs	r3, r3
 800572e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005730:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005734:	4641      	mov	r1, r8
 8005736:	1851      	adds	r1, r2, r1
 8005738:	6339      	str	r1, [r7, #48]	@ 0x30
 800573a:	4649      	mov	r1, r9
 800573c:	414b      	adcs	r3, r1
 800573e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800574c:	4659      	mov	r1, fp
 800574e:	00cb      	lsls	r3, r1, #3
 8005750:	4651      	mov	r1, sl
 8005752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005756:	4651      	mov	r1, sl
 8005758:	00ca      	lsls	r2, r1, #3
 800575a:	4610      	mov	r0, r2
 800575c:	4619      	mov	r1, r3
 800575e:	4603      	mov	r3, r0
 8005760:	4642      	mov	r2, r8
 8005762:	189b      	adds	r3, r3, r2
 8005764:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005768:	464b      	mov	r3, r9
 800576a:	460a      	mov	r2, r1
 800576c:	eb42 0303 	adc.w	r3, r2, r3
 8005770:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005780:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005788:	460b      	mov	r3, r1
 800578a:	18db      	adds	r3, r3, r3
 800578c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800578e:	4613      	mov	r3, r2
 8005790:	eb42 0303 	adc.w	r3, r2, r3
 8005794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005796:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800579a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800579e:	f7fb fa27 	bl	8000bf0 <__aeabi_uldivmod>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4b0d      	ldr	r3, [pc, #52]	@ (80057dc <UART_SetConfig+0x2d4>)
 80057a8:	fba3 1302 	umull	r1, r3, r3, r2
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	2164      	movs	r1, #100	@ 0x64
 80057b0:	fb01 f303 	mul.w	r3, r1, r3
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	3332      	adds	r3, #50	@ 0x32
 80057ba:	4a08      	ldr	r2, [pc, #32]	@ (80057dc <UART_SetConfig+0x2d4>)
 80057bc:	fba2 2303 	umull	r2, r3, r2, r3
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	f003 0207 	and.w	r2, r3, #7
 80057c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4422      	add	r2, r4
 80057ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057d0:	e106      	b.n	80059e0 <UART_SetConfig+0x4d8>
 80057d2:	bf00      	nop
 80057d4:	40011000 	.word	0x40011000
 80057d8:	40011400 	.word	0x40011400
 80057dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057e4:	2200      	movs	r2, #0
 80057e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80057ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80057f2:	4642      	mov	r2, r8
 80057f4:	464b      	mov	r3, r9
 80057f6:	1891      	adds	r1, r2, r2
 80057f8:	6239      	str	r1, [r7, #32]
 80057fa:	415b      	adcs	r3, r3
 80057fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80057fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005802:	4641      	mov	r1, r8
 8005804:	1854      	adds	r4, r2, r1
 8005806:	4649      	mov	r1, r9
 8005808:	eb43 0501 	adc.w	r5, r3, r1
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	00eb      	lsls	r3, r5, #3
 8005816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800581a:	00e2      	lsls	r2, r4, #3
 800581c:	4614      	mov	r4, r2
 800581e:	461d      	mov	r5, r3
 8005820:	4643      	mov	r3, r8
 8005822:	18e3      	adds	r3, r4, r3
 8005824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005828:	464b      	mov	r3, r9
 800582a:	eb45 0303 	adc.w	r3, r5, r3
 800582e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800583e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800584e:	4629      	mov	r1, r5
 8005850:	008b      	lsls	r3, r1, #2
 8005852:	4621      	mov	r1, r4
 8005854:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005858:	4621      	mov	r1, r4
 800585a:	008a      	lsls	r2, r1, #2
 800585c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005860:	f7fb f9c6 	bl	8000bf0 <__aeabi_uldivmod>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4b60      	ldr	r3, [pc, #384]	@ (80059ec <UART_SetConfig+0x4e4>)
 800586a:	fba3 2302 	umull	r2, r3, r3, r2
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	011c      	lsls	r4, r3, #4
 8005872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005876:	2200      	movs	r2, #0
 8005878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800587c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005880:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005884:	4642      	mov	r2, r8
 8005886:	464b      	mov	r3, r9
 8005888:	1891      	adds	r1, r2, r2
 800588a:	61b9      	str	r1, [r7, #24]
 800588c:	415b      	adcs	r3, r3
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005894:	4641      	mov	r1, r8
 8005896:	1851      	adds	r1, r2, r1
 8005898:	6139      	str	r1, [r7, #16]
 800589a:	4649      	mov	r1, r9
 800589c:	414b      	adcs	r3, r1
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058ac:	4659      	mov	r1, fp
 80058ae:	00cb      	lsls	r3, r1, #3
 80058b0:	4651      	mov	r1, sl
 80058b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058b6:	4651      	mov	r1, sl
 80058b8:	00ca      	lsls	r2, r1, #3
 80058ba:	4610      	mov	r0, r2
 80058bc:	4619      	mov	r1, r3
 80058be:	4603      	mov	r3, r0
 80058c0:	4642      	mov	r2, r8
 80058c2:	189b      	adds	r3, r3, r2
 80058c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058c8:	464b      	mov	r3, r9
 80058ca:	460a      	mov	r2, r1
 80058cc:	eb42 0303 	adc.w	r3, r2, r3
 80058d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80058ec:	4649      	mov	r1, r9
 80058ee:	008b      	lsls	r3, r1, #2
 80058f0:	4641      	mov	r1, r8
 80058f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058f6:	4641      	mov	r1, r8
 80058f8:	008a      	lsls	r2, r1, #2
 80058fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80058fe:	f7fb f977 	bl	8000bf0 <__aeabi_uldivmod>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4611      	mov	r1, r2
 8005908:	4b38      	ldr	r3, [pc, #224]	@ (80059ec <UART_SetConfig+0x4e4>)
 800590a:	fba3 2301 	umull	r2, r3, r3, r1
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	2264      	movs	r2, #100	@ 0x64
 8005912:	fb02 f303 	mul.w	r3, r2, r3
 8005916:	1acb      	subs	r3, r1, r3
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	3332      	adds	r3, #50	@ 0x32
 800591c:	4a33      	ldr	r2, [pc, #204]	@ (80059ec <UART_SetConfig+0x4e4>)
 800591e:	fba2 2303 	umull	r2, r3, r2, r3
 8005922:	095b      	lsrs	r3, r3, #5
 8005924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005928:	441c      	add	r4, r3
 800592a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800592e:	2200      	movs	r2, #0
 8005930:	673b      	str	r3, [r7, #112]	@ 0x70
 8005932:	677a      	str	r2, [r7, #116]	@ 0x74
 8005934:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005938:	4642      	mov	r2, r8
 800593a:	464b      	mov	r3, r9
 800593c:	1891      	adds	r1, r2, r2
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	415b      	adcs	r3, r3
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005948:	4641      	mov	r1, r8
 800594a:	1851      	adds	r1, r2, r1
 800594c:	6039      	str	r1, [r7, #0]
 800594e:	4649      	mov	r1, r9
 8005950:	414b      	adcs	r3, r1
 8005952:	607b      	str	r3, [r7, #4]
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005960:	4659      	mov	r1, fp
 8005962:	00cb      	lsls	r3, r1, #3
 8005964:	4651      	mov	r1, sl
 8005966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800596a:	4651      	mov	r1, sl
 800596c:	00ca      	lsls	r2, r1, #3
 800596e:	4610      	mov	r0, r2
 8005970:	4619      	mov	r1, r3
 8005972:	4603      	mov	r3, r0
 8005974:	4642      	mov	r2, r8
 8005976:	189b      	adds	r3, r3, r2
 8005978:	66bb      	str	r3, [r7, #104]	@ 0x68
 800597a:	464b      	mov	r3, r9
 800597c:	460a      	mov	r2, r1
 800597e:	eb42 0303 	adc.w	r3, r2, r3
 8005982:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	663b      	str	r3, [r7, #96]	@ 0x60
 800598e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800599c:	4649      	mov	r1, r9
 800599e:	008b      	lsls	r3, r1, #2
 80059a0:	4641      	mov	r1, r8
 80059a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059a6:	4641      	mov	r1, r8
 80059a8:	008a      	lsls	r2, r1, #2
 80059aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059ae:	f7fb f91f 	bl	8000bf0 <__aeabi_uldivmod>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4b0d      	ldr	r3, [pc, #52]	@ (80059ec <UART_SetConfig+0x4e4>)
 80059b8:	fba3 1302 	umull	r1, r3, r3, r2
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	2164      	movs	r1, #100	@ 0x64
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	3332      	adds	r3, #50	@ 0x32
 80059ca:	4a08      	ldr	r2, [pc, #32]	@ (80059ec <UART_SetConfig+0x4e4>)
 80059cc:	fba2 2303 	umull	r2, r3, r2, r3
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	f003 020f 	and.w	r2, r3, #15
 80059d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4422      	add	r2, r4
 80059de:	609a      	str	r2, [r3, #8]
}
 80059e0:	bf00      	nop
 80059e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059e6:	46bd      	mov	sp, r7
 80059e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ec:	51eb851f 	.word	0x51eb851f

080059f0 <sqrt>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	ed2d 8b02 	vpush	{d8}
 80059f6:	ec55 4b10 	vmov	r4, r5, d0
 80059fa:	f000 f825 	bl	8005a48 <__ieee754_sqrt>
 80059fe:	4622      	mov	r2, r4
 8005a00:	462b      	mov	r3, r5
 8005a02:	4620      	mov	r0, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	eeb0 8a40 	vmov.f32	s16, s0
 8005a0a:	eef0 8a60 	vmov.f32	s17, s1
 8005a0e:	f7fb f841 	bl	8000a94 <__aeabi_dcmpun>
 8005a12:	b990      	cbnz	r0, 8005a3a <sqrt+0x4a>
 8005a14:	2200      	movs	r2, #0
 8005a16:	2300      	movs	r3, #0
 8005a18:	4620      	mov	r0, r4
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	f7fb f812 	bl	8000a44 <__aeabi_dcmplt>
 8005a20:	b158      	cbz	r0, 8005a3a <sqrt+0x4a>
 8005a22:	f000 f8f3 	bl	8005c0c <__errno>
 8005a26:	2321      	movs	r3, #33	@ 0x21
 8005a28:	6003      	str	r3, [r0, #0]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	f7fa febf 	bl	80007b4 <__aeabi_ddiv>
 8005a36:	ec41 0b18 	vmov	d8, r0, r1
 8005a3a:	eeb0 0a48 	vmov.f32	s0, s16
 8005a3e:	eef0 0a68 	vmov.f32	s1, s17
 8005a42:	ecbd 8b02 	vpop	{d8}
 8005a46:	bd38      	pop	{r3, r4, r5, pc}

08005a48 <__ieee754_sqrt>:
 8005a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	4a68      	ldr	r2, [pc, #416]	@ (8005bf0 <__ieee754_sqrt+0x1a8>)
 8005a4e:	ec55 4b10 	vmov	r4, r5, d0
 8005a52:	43aa      	bics	r2, r5
 8005a54:	462b      	mov	r3, r5
 8005a56:	4621      	mov	r1, r4
 8005a58:	d110      	bne.n	8005a7c <__ieee754_sqrt+0x34>
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	4629      	mov	r1, r5
 8005a60:	f7fa fd7e 	bl	8000560 <__aeabi_dmul>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4620      	mov	r0, r4
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	f7fa fbc2 	bl	80001f4 <__adddf3>
 8005a70:	4604      	mov	r4, r0
 8005a72:	460d      	mov	r5, r1
 8005a74:	ec45 4b10 	vmov	d0, r4, r5
 8005a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7c:	2d00      	cmp	r5, #0
 8005a7e:	dc0e      	bgt.n	8005a9e <__ieee754_sqrt+0x56>
 8005a80:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005a84:	4322      	orrs	r2, r4
 8005a86:	d0f5      	beq.n	8005a74 <__ieee754_sqrt+0x2c>
 8005a88:	b19d      	cbz	r5, 8005ab2 <__ieee754_sqrt+0x6a>
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	4629      	mov	r1, r5
 8005a90:	f7fa fbae 	bl	80001f0 <__aeabi_dsub>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	f7fa fe8c 	bl	80007b4 <__aeabi_ddiv>
 8005a9c:	e7e8      	b.n	8005a70 <__ieee754_sqrt+0x28>
 8005a9e:	152a      	asrs	r2, r5, #20
 8005aa0:	d115      	bne.n	8005ace <__ieee754_sqrt+0x86>
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	e009      	b.n	8005aba <__ieee754_sqrt+0x72>
 8005aa6:	0acb      	lsrs	r3, r1, #11
 8005aa8:	3a15      	subs	r2, #21
 8005aaa:	0549      	lsls	r1, r1, #21
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0fa      	beq.n	8005aa6 <__ieee754_sqrt+0x5e>
 8005ab0:	e7f7      	b.n	8005aa2 <__ieee754_sqrt+0x5a>
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	e7fa      	b.n	8005aac <__ieee754_sqrt+0x64>
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	3001      	adds	r0, #1
 8005aba:	02dc      	lsls	r4, r3, #11
 8005abc:	d5fb      	bpl.n	8005ab6 <__ieee754_sqrt+0x6e>
 8005abe:	1e44      	subs	r4, r0, #1
 8005ac0:	1b12      	subs	r2, r2, r4
 8005ac2:	f1c0 0420 	rsb	r4, r0, #32
 8005ac6:	fa21 f404 	lsr.w	r4, r1, r4
 8005aca:	4323      	orrs	r3, r4
 8005acc:	4081      	lsls	r1, r0
 8005ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ad2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8005ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ada:	07d2      	lsls	r2, r2, #31
 8005adc:	bf5c      	itt	pl
 8005ade:	005b      	lslpl	r3, r3, #1
 8005ae0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005ae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005ae8:	bf58      	it	pl
 8005aea:	0049      	lslpl	r1, r1, #1
 8005aec:	2600      	movs	r6, #0
 8005aee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8005af2:	106d      	asrs	r5, r5, #1
 8005af4:	0049      	lsls	r1, r1, #1
 8005af6:	2016      	movs	r0, #22
 8005af8:	4632      	mov	r2, r6
 8005afa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005afe:	1917      	adds	r7, r2, r4
 8005b00:	429f      	cmp	r7, r3
 8005b02:	bfde      	ittt	le
 8005b04:	193a      	addle	r2, r7, r4
 8005b06:	1bdb      	suble	r3, r3, r7
 8005b08:	1936      	addle	r6, r6, r4
 8005b0a:	0fcf      	lsrs	r7, r1, #31
 8005b0c:	3801      	subs	r0, #1
 8005b0e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8005b12:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005b16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005b1a:	d1f0      	bne.n	8005afe <__ieee754_sqrt+0xb6>
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	2720      	movs	r7, #32
 8005b20:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005b24:	429a      	cmp	r2, r3
 8005b26:	eb00 0e0c 	add.w	lr, r0, ip
 8005b2a:	db02      	blt.n	8005b32 <__ieee754_sqrt+0xea>
 8005b2c:	d113      	bne.n	8005b56 <__ieee754_sqrt+0x10e>
 8005b2e:	458e      	cmp	lr, r1
 8005b30:	d811      	bhi.n	8005b56 <__ieee754_sqrt+0x10e>
 8005b32:	f1be 0f00 	cmp.w	lr, #0
 8005b36:	eb0e 000c 	add.w	r0, lr, ip
 8005b3a:	da42      	bge.n	8005bc2 <__ieee754_sqrt+0x17a>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	db40      	blt.n	8005bc2 <__ieee754_sqrt+0x17a>
 8005b40:	f102 0801 	add.w	r8, r2, #1
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	458e      	cmp	lr, r1
 8005b48:	bf88      	it	hi
 8005b4a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005b4e:	eba1 010e 	sub.w	r1, r1, lr
 8005b52:	4464      	add	r4, ip
 8005b54:	4642      	mov	r2, r8
 8005b56:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005b5a:	3f01      	subs	r7, #1
 8005b5c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005b60:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005b64:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005b68:	d1dc      	bne.n	8005b24 <__ieee754_sqrt+0xdc>
 8005b6a:	4319      	orrs	r1, r3
 8005b6c:	d01b      	beq.n	8005ba6 <__ieee754_sqrt+0x15e>
 8005b6e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8005bf4 <__ieee754_sqrt+0x1ac>
 8005b72:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8005bf8 <__ieee754_sqrt+0x1b0>
 8005b76:	e9da 0100 	ldrd	r0, r1, [sl]
 8005b7a:	e9db 2300 	ldrd	r2, r3, [fp]
 8005b7e:	f7fa fb37 	bl	80001f0 <__aeabi_dsub>
 8005b82:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	f7fa ff63 	bl	8000a58 <__aeabi_dcmple>
 8005b92:	b140      	cbz	r0, 8005ba6 <__ieee754_sqrt+0x15e>
 8005b94:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005b98:	e9da 0100 	ldrd	r0, r1, [sl]
 8005b9c:	e9db 2300 	ldrd	r2, r3, [fp]
 8005ba0:	d111      	bne.n	8005bc6 <__ieee754_sqrt+0x17e>
 8005ba2:	3601      	adds	r6, #1
 8005ba4:	463c      	mov	r4, r7
 8005ba6:	1072      	asrs	r2, r6, #1
 8005ba8:	0863      	lsrs	r3, r4, #1
 8005baa:	07f1      	lsls	r1, r6, #31
 8005bac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005bb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005bb4:	bf48      	it	mi
 8005bb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005bba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	e756      	b.n	8005a70 <__ieee754_sqrt+0x28>
 8005bc2:	4690      	mov	r8, r2
 8005bc4:	e7be      	b.n	8005b44 <__ieee754_sqrt+0xfc>
 8005bc6:	f7fa fb15 	bl	80001f4 <__adddf3>
 8005bca:	e9da 8900 	ldrd	r8, r9, [sl]
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	f7fa ff35 	bl	8000a44 <__aeabi_dcmplt>
 8005bda:	b120      	cbz	r0, 8005be6 <__ieee754_sqrt+0x19e>
 8005bdc:	1ca0      	adds	r0, r4, #2
 8005bde:	bf08      	it	eq
 8005be0:	3601      	addeq	r6, #1
 8005be2:	3402      	adds	r4, #2
 8005be4:	e7df      	b.n	8005ba6 <__ieee754_sqrt+0x15e>
 8005be6:	1c63      	adds	r3, r4, #1
 8005be8:	f023 0401 	bic.w	r4, r3, #1
 8005bec:	e7db      	b.n	8005ba6 <__ieee754_sqrt+0x15e>
 8005bee:	bf00      	nop
 8005bf0:	7ff00000 	.word	0x7ff00000
 8005bf4:	20000020 	.word	0x20000020
 8005bf8:	20000018 	.word	0x20000018

08005bfc <memset>:
 8005bfc:	4402      	add	r2, r0
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d100      	bne.n	8005c06 <memset+0xa>
 8005c04:	4770      	bx	lr
 8005c06:	f803 1b01 	strb.w	r1, [r3], #1
 8005c0a:	e7f9      	b.n	8005c00 <memset+0x4>

08005c0c <__errno>:
 8005c0c:	4b01      	ldr	r3, [pc, #4]	@ (8005c14 <__errno+0x8>)
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000028 	.word	0x20000028

08005c18 <__libc_init_array>:
 8005c18:	b570      	push	{r4, r5, r6, lr}
 8005c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8005c50 <__libc_init_array+0x38>)
 8005c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8005c54 <__libc_init_array+0x3c>)
 8005c1e:	1b64      	subs	r4, r4, r5
 8005c20:	10a4      	asrs	r4, r4, #2
 8005c22:	2600      	movs	r6, #0
 8005c24:	42a6      	cmp	r6, r4
 8005c26:	d109      	bne.n	8005c3c <__libc_init_array+0x24>
 8005c28:	4d0b      	ldr	r5, [pc, #44]	@ (8005c58 <__libc_init_array+0x40>)
 8005c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8005c5c <__libc_init_array+0x44>)
 8005c2c:	f000 f818 	bl	8005c60 <_init>
 8005c30:	1b64      	subs	r4, r4, r5
 8005c32:	10a4      	asrs	r4, r4, #2
 8005c34:	2600      	movs	r6, #0
 8005c36:	42a6      	cmp	r6, r4
 8005c38:	d105      	bne.n	8005c46 <__libc_init_array+0x2e>
 8005c3a:	bd70      	pop	{r4, r5, r6, pc}
 8005c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c40:	4798      	blx	r3
 8005c42:	3601      	adds	r6, #1
 8005c44:	e7ee      	b.n	8005c24 <__libc_init_array+0xc>
 8005c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4a:	4798      	blx	r3
 8005c4c:	3601      	adds	r6, #1
 8005c4e:	e7f2      	b.n	8005c36 <__libc_init_array+0x1e>
 8005c50:	08005d10 	.word	0x08005d10
 8005c54:	08005d10 	.word	0x08005d10
 8005c58:	08005d10 	.word	0x08005d10
 8005c5c:	08005d14 	.word	0x08005d14

08005c60 <_init>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	bf00      	nop
 8005c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c66:	bc08      	pop	{r3}
 8005c68:	469e      	mov	lr, r3
 8005c6a:	4770      	bx	lr

08005c6c <_fini>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	bf00      	nop
 8005c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c72:	bc08      	pop	{r3}
 8005c74:	469e      	mov	lr, r3
 8005c76:	4770      	bx	lr
